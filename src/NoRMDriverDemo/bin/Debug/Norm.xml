<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Norm</name>
    </assembly>
    <members>
        <member name="T:Norm.Responses.SetProfileResponse">
            <summary>
            The set profile response.
            </summary>
        </member>
        <member name="T:Norm.Responses.BaseStatusMessage">
            <summary>
            Represents a message with an Ok status
            </summary>
        </member>
        <member name="T:Norm.BSON.IExpando">
            <summary>
            If this interface is implemented on your class,
            the serializer will store values that cannot be mapped to other properties via the indexer.
            </summary>
        </member>
        <member name="M:Norm.BSON.IExpando.AllProperties">
            <summary>
            The enumeration of properties on this flyweight that are not statically defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.IExpando.Delete(System.String)">
            <summary>
            Remove a property that isn't defined.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Norm.BSON.IExpando.Item(System.String)">
            <summary>
            Get/set a property that is not statically defined.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Responses.BaseStatusMessage.AllProperties">
            <summary>
            Additional, non-static properties of this message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.BaseStatusMessage.ok">
            <summary>
            This is the raw value returned from the response. 
            It is required for serializer support, use "WasSuccessful" if you need a boolean value.
            </summary>
        </member>
        <member name="P:Norm.Responses.BaseStatusMessage.WasSuccessful">
            <summary>
            Did this message return correctly?
            </summary>
            <remarks>This maps to the "OK" value of the response.</remarks>
        </member>
        <member name="P:Norm.Responses.SetProfileResponse.Profile">
            <summary>
            The profile.
            </summary>
            <value>The Profile property gets/sets the Profile data member.</value>
        </member>
        <member name="P:Norm.Responses.SetProfileResponse.PreviousLevel">
            <summary>
            The previous level.
            </summary>
            <value>The PreviousLevel property gets the PreviousLevel data member.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest">
            <summary>
            The drop database request.
            </summary>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.ISystemQuery">
            <summary>
            A marker interface that all protocol query messages should implement, used for infrastructure.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest.DropDatabase">
            <summary>
            Drop database.
            </summary>
            <value>The DropDatabase property gets the DropDatabase data member.</value>
        </member>
        <member name="T:Norm.MapReduceOptions`1">
            <summary>
            Map/reduce options for a given type
            </summary>
            <typeparam name="T">Type to map and recude</typeparam>
        </member>
        <member name="T:Norm.MapReduceOptions">
            <summary>
            The map reduce options.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions"/> class.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions"/> class.
            </summary>
            <param name="collectionName">
            The collection name.
            </param>
        </member>
        <member name="P:Norm.MapReduceOptions.Map">
            <summary>
            Gets or sets Map.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Reduce">
            <summary>
            Gets or sets Reduce.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Query">
            <summary>
            Gets or sets the Query object for MapReduce.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.CollectionName">
            <summary>
            Gets or sets CollectionName.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Permanant">
            <summary>
            Gets or sets a value indicating whether Permanant.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.OutputCollectionName">
            <summary>
            Gets or sets OutputCollectionName.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Limit">
            <summary>
            Gets or sets Limit.
            </summary>
        </member>
        <member name="P:Norm.MapReduceOptions.Finalize">
            <summary>
            Gets or sets Finalize.
            </summary>
        </member>
        <member name="M:Norm.MapReduceOptions`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduceOptions`1"/> class.
            </summary>
        </member>
        <member name="T:Norm.Linq.LinqExtensions">
            <summary>
            Linq extensions.
            </summary>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.GetConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value.
            </summary>
            <param name="exp">The exp.</param>
            <returns>The get constant value.</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.Explain``1(System.Linq.IQueryable{``0})">
            <summary>
            Asks Mongo for an explain plan for a linq query.
            </summary>
            <typeparam name="T">Type to explain</typeparam>
            <param name="expression">The expression.</param>
            <returns>Query explain plan</returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.Hint``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Norm.Protocol.Messages.IndexOption)">
            <summary>
            Adds a query hint.
            </summary>
            <typeparam name="T">Document type</typeparam>
            <param name="find">The type of document being enumerated.</param>
            <param name="hint">The query hint expression.</param>
            <param name="direction">Ascending or descending.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqExtensions.EscapeDoubleQuotes(System.String)">
            <summary>
            Escapes the double quotes.
            </summary>
            <param name="str">The string</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="T:Norm.Protocol.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:Norm.Protocol.Message._collection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._connection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._messageLength">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._requestID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Protocol.Message._responseID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Protocol.Message.#ctor(Norm.IConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Message"/> class.
            </summary>
            <param name="connection">
            The connection.
            </param>
            <param name="fullyQualifiedCollName">
            The fully qualified coll name.
            </param>
        </member>
        <member name="T:Norm.Responses.BuildInfoResponse">
            <summary>
            The build info response.
            </summary>
        </member>
        <member name="M:Norm.Responses.BuildInfoResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.BuildInfoResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.Version">
            <summary>
            The version.
            </summary>
            <value>The Version property gets the Version data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.GitVersion">
            <summary>
            The git version.
            </summary>
            <value>The GitVersion property gets the GitVersion data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.SystemInformation">
            <summary>
            The sys info.
            </summary>
            <value>The SystemInformation property gets the SystemInformation data member.</value>
        </member>
        <member name="P:Norm.Responses.BuildInfoResponse.Bits">
            <summary>The number of bits for the current build (32 or 64).</summary>
            <value>The Bits property gets the Bits data member.</value>
        </member>
        <member name="T:Norm.MongoAdmin">
            <summary>
            This class is used to connect to the MongoDB server and send special Administrative commands to it.
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoAdmin"/> class.
            </summary>
            <param name="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Norm.MongoAdmin.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.DropDatabase">
            <summary>
            Drop the admin database?
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetCurrentOperations">
            <summary>
            Yields a list of information about what processes are currently running on MongoDB.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.ResetLastError">
            <summary>
            Clear the last error on the server.
            </summary>
            <returns>
            The reset last error.
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.PreviousErrors">
            <summary>
            Get the previous error from the server.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.AssertionInfo">
            <summary>
            The assertion info.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.ServerStatus">
            <summary>
            Get information about the condition of the server.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoAdmin.SetProfileLevel(System.Int32)">
            <summary>
            Set the profiling currently defined for the server, default is 1.
            </summary>
            <param name="value">The value.</param>
            <returns>The set profile level.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.SetProfileLevel(System.Int32,System.Int32@)">
            <summary>
            Set the profiling currently defined for the server, default is 1.
            </summary>
            <param name="value">The value.</param>
            <returns>The set profile level.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetProfileLevel">
            <summary>
            Find out the profile level on the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.RepairDatabase(System.Boolean,System.Boolean)">
            <summary>
            Ask the server to do a consistency check/repair on the database.
            </summary>
            <param name="preserveClonedFilesOnFailure">if set to <c>true</c> [preserve cloned files on failure].</param>
            <param name="backupOriginalFiles">if set to <c>true</c> [backup original files].</param>
            <returns>The repair database.</returns>
        </member>
        <member name="M:Norm.MongoAdmin.KillOperation(System.Double)">
            <summary>
            Request that the server stops executing a currently running process.
            </summary>
            <param name="operationId">The operation id.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.GetAllDatabases">
            <summary>
            What databases are available on the server?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.ForceSync(System.Boolean)">
            <summary>
            Request that the server write any uncommitted writes to the filesystem.
            </summary>
            <param name="async">if set to <c>true</c> [async].</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.BuildInfo">
            <summary>
            The information about this MongoDB, when and how it was built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoAdmin.AssertConnectedToAdmin">
            <summary>
            Verify that we're in admin.
            </summary>
        </member>
        <member name="M:Norm.MongoAdmin.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Norm.MongoAdmin.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Norm.MongoAdmin"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Norm.MongoAdmin.Database">
            <summary>
            Gets Database.
            </summary>
        </member>
        <member name="T:Norm.MapReduce">
            <summary>
            Map reduce.
            </summary>
        </member>
        <member name="M:Norm.MapReduce.#ctor(Norm.MongoDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MapReduce"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
            <remarks>
            Removed IDisposable form MapReduce. We do not need to delete the temporary collections 
            (and it was causing errors). These are deleted by Mongo when the connection is terminated. 
            http://groups.google.com/group/mongodb-user/browse_thread/thread/5b068bd40847950d/8de9428e132e8b68?lnk=raot
            </remarks>
        </member>
        <member name="M:Norm.MapReduce.Execute(Norm.MapReduceOptions)">
            <summary>
            Execute.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Linq.MongoQueryProvider">
            <summary>
            The mongo query provider.
            </summary>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.#ctor(Norm.Mongo)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQueryProvider"/> class.
            </summary>
            <param name="server">
            The server.
            </param>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. create query.
            </summary>
            <typeparam name="S">Type of query to create</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. create query.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. execute.
            </summary>
            <typeparam name="S">Type to execute</typeparam>
            <param name="expression">The expression.</param>
            <returns>Resulting object</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            The i query provider. execute.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The i query provider. execute.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.ExecuteQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>The execute.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryProvider.ExecuteMR``1(System.String,System.String,System.String,System.String)">
            <summary>
            Actual execution of the MapReduce stuff (thanks Karl!)
            </summary>
            <typeparam name="T">Type to map and reduce</typeparam>
            <param name="typeName">Name of the type.</param>
            <param name="map">The map.</param>
            <param name="reduce">The reduce.</param>
            <param name="finalize">The finalize.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.Linq.MongoQueryProvider.DB">
            <summary>
            Gets the DB.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryProvider.Server">
            <summary>
            Gets the server.
            </summary>
        </member>
        <member name="T:Norm.Linq.MapReduceResult`1">
            <summary>
            The map reduce result.
            </summary>
            <typeparam name="T">Type to map and reduce</typeparam>
        </member>
        <member name="P:Norm.Linq.MapReduceResult`1.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Norm.Linq.MapReduceResult`1.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="T:Norm.QueuedConnectionProvider">
            <summary>
            The queued connection provider.
            </summary>
        </member>
        <member name="T:Norm.ConnectionProvider">
            <summary>
            Connectin provider
            </summary>
        </member>
        <member name="T:Norm.IConnectionProvider">
            <summary>
            The i connection provider.
            </summary>
        </member>
        <member name="M:Norm.IConnectionProvider.Open(System.String)">
            <summary>
            The open.
            </summary>
            <param name="options">
            The options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.IConnectionProvider.Close(Norm.IConnection)">
            <summary>
            The close.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="P:Norm.IConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="M:Norm.ConnectionProvider.Open(System.String)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ConnectionProvider.Close(Norm.IConnection)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ConnectionProvider.CreateNewConnection">
            <summary>
            Creates the new connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionProvider.Authenticate(Norm.IConnection)">
            <summary>
            Authenticates the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.ConnectionProvider.ConnectionString">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.QueuedConnectionProvider"/> class.
            </summary>
            <param name="builder">
            The builder.
            </param>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.Open(System.String)">
            <summary>
            Opens a connection.
            </summary>
            <param name="options">
            Connection options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes a connection.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Norm.QueuedConnectionProvider.PreQueueConnections(System.Int32)">
            <summary>
            Adds connections to the pool on startup so subsequent calls
            don't have the latency of creating a TCP connection.  
            </summary>
            <param name="poolSize">
            Size of the pool.
            </param>
        </member>
        <member name="P:Norm.QueuedConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.ConnectionStringBuilder">
            <summary>
            The connection string builder.
            </summary>
        </member>
        <member name="T:Norm.IOptionsContainer">
            <summary>
            Options container.
            </summary>
        </member>
        <member name="M:Norm.IOptionsContainer.SetQueryTimeout(System.Int32)">
            <summary>
            Sets the query timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetStrictMode(System.Boolean)">
            <summary>
            Sets strict mode.
            </summary>
            <param name="strict">The strict.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetPoolSize(System.Int32)">
            <summary>
            Sets yhe pool size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled flag.
            </summary>
            <param name="pooled">The pooled.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.IOptionsContainer.SetLifetime(System.Int32)">
            <summary>
            Sets the connection lifetime.
            </summary>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Norm.ConnectionStringBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.Create(System.String)">
            <summary>
            Creates a connection string builder.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetQueryTimeout(System.Int32)">
            <summary>
            Set the query timeout.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetStrictMode(System.Boolean)">
            <summary>
            Sets strict mode.
            </summary>
            <param name="strict">
            The strict.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetPoolSize(System.Int32)">
            <summary>
            Set the pool size.
            </summary>
            <param name="size">
            The size.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled flag.
            </summary>
            <param name="pooled">
            The pooled.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.SetLifetime(System.Int32)">
            <summary>
            Sets the lifetime.
            </summary>
            <param name="lifetime">
            The lifetime.
            </param>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildOptions(Norm.IOptionsContainer,System.String)">
            <summary>
            The build options.
            </summary>
            <param name="container">The container.</param>
            <param name="options">The options.</param>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildAuthentication(System.Text.StringBuilder)">
            <summary>
            The build authentication.
            </summary>
            <param name="sb">The string builder.</param>
            <returns></returns>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildDatabase(System.Text.StringBuilder)">
            <summary>
            Builds a database.
            </summary>
            <param name="sb">The sb.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionStringBuilder.BuildServerList(System.Text.StringBuilder)">
            <summary>
            The build server list.
            </summary>
            <param name="sb">The sb.</param>
            <exception cref="T:Norm.MongoException">
            </exception>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Servers">
            <summary>
            Gets a server list.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Database">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.StrictMode">
            <summary>
            Gets a value indicating whether strict mode is enabled.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Pooled">
            <summary>
            Gets a value indicating whether connections are pooled.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.PoolSize">
            <summary>
            Gets the connection pool size.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Timeout">
            <summary>
            Gets the connection timeout.
            </summary>
        </member>
        <member name="P:Norm.ConnectionStringBuilder.Lifetime">
            <summary>
            Gets the connection lifetime.
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.GreaterOrEqualQualifier">
            <summary>
            The greater or equal qualifier.
            </summary>
        </member>
        <member name="T:Norm.BSON.QualifierCommand">
            <summary>
            The qualifier command.
            </summary>
        </member>
        <member name="T:Norm.BSON.Command">
            <summary>
            An abstract command
            </summary>
        </member>
        <member name="M:Norm.BSON.Command.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.Command"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Norm.BSON.Command.CommandName">
            <summary>
            Gets or sets CommandName.
            </summary>
        </member>
        <member name="P:Norm.BSON.Command.ValueForCommand">
            <summary>
            Gets or sets ValueForCommand.
            </summary>
        </member>
        <member name="M:Norm.BSON.QualifierCommand.#ctor(System.String,System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.GreaterOrEqualQualifier.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.GreaterOrEqualQualifier"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.OrderBy">
            <summary>
            Values that can be used to define order direction.
            </summary>
            <remarks>
            This is in the Norm namespace because it makes for "easy access"
            </remarks>
        </member>
        <member name="F:Norm.OrderBy.Ascending">
            <summary>
            Order Ascending
            </summary>
        </member>
        <member name="F:Norm.OrderBy.Descending">
            <summary>
            Order Descending
            </summary>
        </member>
        <member name="T:Norm.MongoIdentifierAttribute">
            <summary>
            Flags a property as a Mongo identifier (_id)
            </summary>
        </member>
        <member name="T:Norm.Responses.GetNonceResponse">
            <summary>
            The get nonce response.
            </summary>
        </member>
        <member name="M:Norm.Responses.GetNonceResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.GetNonceResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.GetNonceResponse.Nonce">
            <summary>
            Gets the nonce.
            </summary>
            <value>The nonce.</value>
        </member>
        <member name="T:Norm.Responses.CollectionStatistics">
            <summary>
            MongoDB information related to a particular collection.
            </summary>
        </member>
        <member name="M:Norm.Responses.CollectionStatistics.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.CollectionStatistics"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.CurrentExtents">
            <summary>
            this correlates to the "numExtents" value that comes back from MongoDB -
            not sure what this is, maybe something to do with Sharding?
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.TotalIndexSize">
            <summary>
            Total size of all indices for this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.LastIndexSize">
            <summary>
            ?? The previous size of the indices on disk before some index operation??
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.IndexSizes">
            <summary>
            Each index and the size on disk of the index.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.PreviousExtentSize">
            <summary>
            Not sure what this is, correlates to "lastExtentSize"
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Flags">
            <summary>
            No idea what this is.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.PaddingFactor">
            <summary>
            The amount of space that is allocated so that 
            inserts can be done without moving pages on disk.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Namespace">
            <summary>
            The namespace in which this collection lives.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Count">
            <summary>
            Number of elements in this collection
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.Size">
            <summary>
            The size of the data in this collection <see cref="P:Norm.Responses.CollectionStatistics.StorageSize"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.StorageSize">
            <summary>
            The size on disk of this collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.CollectionStatistics.NumberOfIndices">
            <summary>
            The number of indices currently defined on this collection.
            </summary>
            <remarks>
            This number shall always be greater or equal 
            to 1, as  _id automatically gets an index.
            </remarks>
            <value></value>
        </member>
        <member name="T:Norm.Responses.DeleteIndicesResponse">
            <summary>
            The delete indices response.
            </summary>
        </member>
        <member name="M:Norm.Responses.DeleteIndicesResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.DeleteIndicesResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.NumberIndexesWas">
            <summary>
            Gets or sets the number of previous indexes.
            </summary>
            <value>The number indexes was.</value>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Norm.Responses.DeleteIndicesResponse.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Norm.MongoQueryExecutor`2">
            <summary>
            Acts as a proxy for query execution so additional paramaters like
            hints can be added with a more fluent syntax around IEnumerable
            and IQueryable.
            </summary>
            <typeparam name="T">The type to query</typeparam>
            <typeparam name="U">Document template type</typeparam>
        </member>
        <member name="M:Norm.MongoQueryExecutor`2.#ctor(Norm.Protocol.Messages.QueryMessage{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoQueryExecutor`2"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Norm.MongoQueryExecutor`2.AddHint(System.String,Norm.Protocol.Messages.IndexOption)">
            <summary>
            Adds a query hint.
            </summary>
            <param name="hint">The hint.</param>
            <param name="direction">The index direction; ascending or descending.</param>
        </member>
        <member name="M:Norm.MongoQueryExecutor`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Norm.MongoQueryExecutor`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Norm.MongoQueryExecutor`2.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Norm.Mongo">
            <summary>
            The primary class for database connections and interaction
            </summary>
        </member>
        <member name="M:Norm.Mongo.#ctor(Norm.IConnectionProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Mongo"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Norm.Mongo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Mongo"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Norm.Mongo.Create(System.String)">
            <summary>
            Parses a connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.Create(System.String,System.String)">
            <summary>
            The parse connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Norm.Mongo.GetCollection``1">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.GetCollection``1(System.String)">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="collectionName">The collection name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Mongo.CreateMapReduce">
            <summary>
            The create map reduce.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Mongo.LastError">
            <summary>
            The last error.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Mongo.ServerConnection">
            <summary>
            The server connection.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Mongo.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:Norm.Mongo.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Norm.Mongo"/> class. 
            </summary>
        </member>
        <member name="P:Norm.Mongo.Database">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="P:Norm.Mongo.ConnectionProvider">
            <summary>
            Gets ConnectionProvider.
            </summary>
        </member>
        <member name="T:Norm.Configuration.IMongoConfigurationMap">
            <summary>
            Defines a configuration map
            </summary>
        </member>
        <member name="T:Norm.IHideObjectMembers">
            <summary>
            This hides the object members below for things like fluent configuration
            where "ToString" makes no sense.
            </summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.GetType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.GetHashCode">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.ToString">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.IHideObjectMembers.Equals(System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.For``1(System.Action{Norm.Configuration.ITypeConfiguration{``0}})">
            <summary>
            Fluently define a configuration for the specified type. This will be merged with any existing types.
            </summary>
            <typeparam name="T">Object type under property mapping</typeparam>
            <param name="typeConfiguration">The type configuration.</param>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.RemoveFor``1">
            <summary>
            Remove all configuration for the specified type.
            </summary>
            <remarks>Supports unit testing, use at your own risk!</remarks>
            <typeparam name="T">The type for which to remove fluent mappings.</typeparam>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the type's collection.
            </summary>
            <param name="type">The type.</param>
            <returns>The get collection name.</returns>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetConnectionString(System.Type)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="type">The type.</param>
            <returns>The get connection string.</returns>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Gets the property alias for a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the type's property.</param>
            <returns>
            Type's property alias if configured; otherwise null
            </returns>
        </member>
        <member name="M:Norm.Configuration.IMongoConfigurationMap.SummaryTypeFor(System.Type)">
            <summary>
            Gets the real collection type
            </summary>
        </member>
        <member name="T:Norm.BSON.Expando">
            <summary>
            Provides a completely blank slate for which to query objects out of the DB.
            Arbitrary properties for all!
            </summary>
            <remarks>
            This is a glorified dictionary, but so be it.
            </remarks>
        </member>
        <member name="M:Norm.BSON.Expando.AllProperties">
            <summary>
            All the properties of this flyweight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.Expando.ReverseKitchen">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.Expando.Get``1(System.String)">
            <summary>
            Pulls the property of the specified type "T". You better know it's in there or you're going to get an exception.. just sayin'
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.Expando.Contains(System.String)">
            <summary>
            Whether the property name is in the kitchen sink.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The contains.</returns>
        </member>
        <member name="M:Norm.BSON.Expando.Delete(System.String)">
            <summary>
            Deletes a property.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Norm.BSON.Expando.Set``1(System.String,``0)">
            <summary>
            Sets the value on the property name you specify.
            remember that this will destroy any other property of the same name
            (culture and case-insensitive matching)
            </summary>
            <typeparam name="T">Type to set</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.Expando.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to read the value out of the flyweight, if it's not here,
            value is set to default(T) and the method returns false.
            </summary>
            <typeparam name="T">Type to try to get</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>The try get.</returns>
        </member>
        <member name="P:Norm.BSON.Expando.Item(System.String)">
            <summary>
            Get or set a property of this flyweight.
            </summary>
            <param name="propertyName">property name</param>
            <returns></returns>
        </member>
        <member name="T:Norm.BSON.BsonSerializer">
            <summary>
            The bson serializer.
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.BsonSerializer"/> class.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Serialize``1(``0)">
            <summary>
            Convert a document to it's BSON equivalent.
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.NewDocument">
            <summary>
            Write the peramble of the BSON document.
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.EndDocument(System.Boolean)">
            <summary>
            Write the document terminator, prepenf the original length.
            </summary>
            <param name="includeEeo">if set to <c>true</c> include eeo.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Written(System.Int32)">
            <summary>
            increment the number of bytes written.
            </summary>
            <param name="length">The length written.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteDocument(System.Object)">
            <summary>
            Writes a document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteFlyweight(Norm.BSON.Expando)">
            <summary>
            Writes a Flyweight.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.IsDbReference(System.Type)">
            <summary>
            Checks to see if the object is a DbReference. If it is, we won't want to override $id to _id.
            </summary>
            <param name="type">The type of the object being serialized.</param>
            <returns>True if the object is a DbReference, false otherwise.</returns>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteObject(System.Object)">
            <summary>
            Actually write the property bytes.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.SerializeMember(System.String,System.Object)">
            <summary>
            Serializes a member.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.String,System.Object)">
            <summary>
            Writes a name/value pair.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Collections.IEnumerable)">
            <summary>
            Writes an enumerable list.
            </summary>
            <param name="enumerable">
            The enumerable.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Collections.IDictionary)">
            <summary>
            Writes a dictionary.
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteBinary(System.Object)">
            <summary>
            Writes binnary.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(Norm.BSON.BSONTypes)">
            <summary>
            Writes a BSON type.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.WriteName(System.String)">
            <summary>
            Writes a name.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.String)">
            <summary>
            Writes a string name.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(System.Text.RegularExpressions.Regex)">
            <summary>
            Writes a regex.
            </summary>
            <param name="regex">
            The regex.
            </param>
        </member>
        <member name="M:Norm.BSON.BsonSerializer.Write(Norm.ScopedCode)">
            <summary>
            Writes scoped code.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.ScopedCode">
            <summary>
            The scoped code.
            </summary>
        </member>
        <member name="P:Norm.ScopedCode.CodeString">
            <summary>
            The scope code.
            </summary>
        </member>
        <member name="P:Norm.ScopedCode.Scope">
            <summary>
            The scope for this code.
            </summary>
        </member>
        <member name="T:Norm.ObjectIdTypeConverter">
            <summary>
            Type Converter for <see cref="T:Norm.ObjectId"/>.
            </summary>
            <remarks>
            Currently supports conversion of a String to ObjectId
            </remarks>
        </member>
        <member name="M:Norm.ObjectIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Norm.ObjectIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.BSON.BsonHelper">
            <summary>
            The bson helper.
            </summary>
        </member>
        <member name="T:Norm.Attributes.MongoIgnoreIfNullAttribute">
            <summary>
            Ignores properties if the value is null.
            </summary>
        </member>
        <member name="T:Norm.Responses.ProfilingInformationResponse">
            <summary>
            The profiling information response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Ts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Info">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ProfilingInformationResponse.Millis">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.Messages.UpdateOption">
            <summary>
            Update options.
            </summary>
        </member>
        <member name="T:Norm.Protocol.MessageHeader">
            <summary>
            Provides information about how a particular 
            request/response should be managed.
            </summary>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.MessageLength">
            <summary>
            This is the total size of the
            message in bytes, include 4 bytes for 
            this MessageLength when setting.
            </summary>
            <value>The MessageLength property gets/sets the MessageLength data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.RequestID">
            <summary>
            A client -or- database generated identifier 
            that identifies this request.
            </summary>
            <value>The RequestID property gets/sets the RequestID data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.ResponseTo">
            <summary>
            Populated by the server, indicates which
            request is being fulfilled with this particlar response.
            </summary>
            <value>The ResponseTo property gets/sets the ResponseTo data member.</value>
        </member>
        <member name="P:Norm.Protocol.MessageHeader.OpCode">
            <summary>
            The action that should be taken by the DB.
            </summary>
            <value>The OpCode property gets/sets the OpCode data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.InsertMessage`1">
            <summary>
            Insert message.
            </summary>
            <typeparam name="T">Type to insert</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.InsertMessage`1.#ctor(Norm.IConnection,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.InsertMessage`1"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="collectionName">The collection name.</param>
            <param name="itemsToInsert">The items to insert.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.InsertMessage`1.Execute">
            <summary>
            Execute.
            </summary>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
        </member>
        <member name="T:Norm.MongoException">
            <summary>
            Indicates an issue with some part of the messaging between C# and the MongoDB.
            </summary>
        </member>
        <member name="M:Norm.MongoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:Norm.Responses.ExplainResponse">
            <summary>
            The explain response.
            </summary>
        </member>
        <member name="T:Norm.Responses.ExplainPlan">
            <summary>
            ExplainPlan plan.
            </summary>
        </member>
        <member name="M:Norm.Responses.ExplainPlan.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ExplainPlan"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.StartKey">
            <summary>
            Gets or sets the start key.
            </summary>
            <value>The start key.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.EndKey">
            <summary>
            Gets or sets the end key.
            </summary>
            <value>The end key.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.IndexBounds">
            <summary>
            Gets or sets the index bounds.
            </summary>
            <value>The index bounds.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.ExplainStartKey">
            <summary>
            Gets the explain start key list.
            </summary>
            <value>The explain start key.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.ExplainEndKey">
            <summary>
            Gets the explain end key list.
            </summary>
            <value>The explain end key.</value>
        </member>
        <member name="P:Norm.Responses.ExplainPlan.ExplainIndexBounds">
            <summary>
            Gets the index bounds.
            </summary>
            <value>All index bounds.</value>
        </member>
        <member name="M:Norm.Responses.ExplainResponse.#cctor">
            <summary>
            Explains the plan.
            </summary>
        </member>
        <member name="M:Norm.Responses.ExplainResponse.AllProperties">
            <summary>
            Additional, non-static properties of this message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.NumberOfScannedObjects">
            <summary>
            Gets the number of objects that would be scanned by this query.
            </summary>
            <value>The number of objects that will be scanned.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.NumberScanned">
            <summary>
            Gets or sets the number scanned.
            </summary>
            <value>The number scanned.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.Milliseconds">
            <summary>
            Gets or sets the milliseconds.
            </summary>
            <value>The milliseconds.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.OldPlan">
            <summary>
            Gets or sets the old explain plan.
            </summary>
            <value>The old plan.</value>
        </member>
        <member name="P:Norm.Responses.ExplainResponse.AllPlans">
            <summary>
            Gets or sets all explain plans.
            </summary>
            <value>All plans.</value>
        </member>
        <member name="T:Norm.Responses.DroppedCollectionResponse">
            <summary>
            The dropped collection response.
            </summary>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.drop">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.NIndexesWas">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.Msg">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.DroppedCollectionResponse.Ns">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.CurrentOperationContainer">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Responses.CurrentOperationContainer.Responses">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Responses.CurrentOperationResponse">
            <summary>
            The current operation response.
            </summary>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.OperationId">
            <summary>TODO::Description.</summary>
            <value>The operation Id</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Operation">
            <summary>TODO::Description.</summary>
            <value>The operation</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Namespace">
            <summary>TODO::Description.</summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.LockType">
            <summary>TODO::Description.</summary>
            <value>The lock type.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.WaitingForLock">
            <summary>TODO::Description.</summary>
            <value>If it is waiting to be locked.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Active">
            <summary>TODO::Description.</summary>
            <value>If it is active.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Client">
            <summary>TODO::Description.</summary>
            <value>The client.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.Query">
            <summary>TODO::Description.</summary>
            <value>The query.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.InLock">
            <summary>TODO::Description.</summary>
            <value>How long it is/was in a lock.</value>
        </member>
        <member name="P:Norm.Responses.CurrentOperationResponse.SecondsRunning">
            <summary>TODO::Description.</summary>
            <value>How long it is/was running</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.NotInQualifier`1">
            <summary>
            The not in qualifier.
            </summary>
            <typeparam name="T">No in type to qualify </typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.NotInQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.NotInQualifier`1"/> class.
            </summary>
            <param name="notInSet">
            The not in set.
            </param>
        </member>
        <member name="T:Norm.Commands.Modifiers.IModifierExpression`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Push``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PushAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.AddToSet``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.Pull``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PopFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PopLast(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.IModifierExpression`1.PullAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Commands.Modifiers.ModifierExpression`1.Expression">
            <summary>
            The modifier expression
            </summary>
        </member>
        <member name="T:Norm.Protocol.ExplainRequest`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Protocol.ExplainRequest`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
            <param name="query">The query.</param>
        </member>
        <member name="P:Norm.Protocol.ExplainRequest`1.Explain">
            <summary>
            Tells the server to explain the query.
            </summary>
            <remarks>
            THIS SHOULD ALWAYS BE DEFINED BEFORE QUERY!
            </remarks>
            <value>The Explain property gets the Explain data member.</value>
        </member>
        <member name="P:Norm.Protocol.ExplainRequest`1.Query">
            <summary>
            The query that should be used.
            </summary>
            <value>The Query property gets/sets the Query data member.</value>
        </member>
        <member name="T:Norm.Protocol.IUpdateWithoutId">
            <summary>
            Classes implementing this interface can be inserted as a
            document without requiring an _id property.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationMap">
            <summary>
            Represents configuration mapping types names to database field names
            </summary>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.For``1(System.Action{Norm.Configuration.ITypeConfiguration{``0}})">
            <summary>
            Configures properties for type T
            </summary>
            <typeparam name="T">Type to configure</typeparam>
            <param name="typeConfigurationAction">The type configuration action.</param>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.IsDbReference(System.Type)">
            <summary>
            Checks to see if the object is a DbReference. If it is, we won't want to override $id to _id.
            </summary>
            <param name="type">The type of the object being serialized.</param>
            <returns>True if the object is a DbReference, false otherwise.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Gets the property alias for a type.
            </summary>
            <remarks>
            If it's the ID Property, returns "_id" regardless of additional mapping.
            If it's not the ID Property, returns the mapped name if it exists.
            Else return the original propertyName.
            </remarks>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the type's property.</param>
            <returns>
            Type's property alias if configured; otherwise null
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the type's collection.
            </summary>
            <param name="type">The type.</param>
            <returns>The get collection name.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.GetConnectionString(System.Type)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="type">The type.</param>
            <returns>The get connection string.</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.RemoveFor``1">
            <summary>
            Removes the mapping for this type.
            </summary>
            <remarks>
            Added to support Unit testing. Use at your own risk!
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMap.Norm#IHideObjectMembers#GetType">
            <summary>
            Represents configuration mapping types names to database field names
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.NotEqualQualifier">
            <summary>
            The not equal qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.NotEqualQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.NotEqualQualifier"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Norm.Responses.ServerStatusResponse">
            <summary>
            The server status response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Uptime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.localTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.GlobalLock">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Mem">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Connections">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Extrainfo">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.IndexCounters">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.BackgroundFlushing">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.OpCounters">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Asserts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ServerStatusResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.GlobalLockResponse">
            <summary>
            The global lock response.
            </summary>    
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.TotalTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.LockTime">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.GlobalLockResponse.Ratio">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.MemoryResponse">
            <summary>
            The memory response.
            </summary>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Resident">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Virtual">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Mapped">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MemoryResponse.Supported">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ConnectionsResponse">
            <summary>
            The connections response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ConnectionsResponse.Current">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ConnectionsResponse.Available">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.ExtraInfoResponse">
            <summary>
            The extra info response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ExtraInfoResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.IndexCountersResponse">
            <summary>
            The index counters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.IndexCountersResponse.Note">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.BackgroundFlushingResponse">
            <summary>
            The background flushing response.
            </summary>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.Flushes">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.TotalMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.AverageMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.LastMilliseconds">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.BackgroundFlushingResponse.LastFinished">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.OpCountersResponse">
            <summary>
            The opcounters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Insertions">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Queries">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Updates">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Deletions">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Pages">
            <summary>How many times a query had to re-query the server for the total resultant set.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.OpCountersResponse.Commands">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.AssertsResponse">
            <summary>
            The opcounters response.
            </summary>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Regular">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Warning">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Msg">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.User">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.AssertsResponse.Rollovers">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.MongoOp">
            <summary>
            The mongo op.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Reply">
            <summary>
            Reply to a client request. responseTo is set
            </summary>
            <remarks>
            Infrastructure. This is reserved for the database, 
            don't use it when creating a message. 
            </remarks>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Message">
            <summary>
            generic msg command followed by a string
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Update">
            <summary>
            update document
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Insert">
            <summary>
            Insert new document.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.GetByOID">
            <summary>
            Maybe NOT USED?
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Query">
            <summary>
            Query a collection.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.GetMore">
            <summary>
            Get more data from a query.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.Delete">
            <summary>
            Delete documents.
            </summary>
        </member>
        <member name="F:Norm.Protocol.MongoOp.KillCursors">
            <summary>
            Tell the database that the client is done with a cursor.
            </summary>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest">
            <summary>
            A command to request the databases in a mongoDB instance.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.DropDatabaseRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.ListDatabasesRequest.ListDatabases">
            <summary>
            Whether or not to list the databases.
            </summary>
            <value>The ListDatabases property gets the ListDatabases data member.</value>
        </member>
        <member name="T:Norm.Connection">
            <summary>
            TCP client MongoDB connection
            </summary>
        </member>
        <member name="T:Norm.IConnection">
            <summary>
            A database connection
            </summary>
        </member>
        <member name="M:Norm.IConnection.GetStream">
            <summary>
            Gets a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.IConnection.Digest(System.String)">
            <summary>
            The digest.
            </summary>
            <param name="nounce">The nounce.</param>
            <returns>The digest.</returns>
        </member>
        <member name="M:Norm.IConnection.LoadOptions(System.String)">
            <summary>
            Loads options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Norm.IConnection.ResetOptions">
            <summary>
            Resets options.
            </summary>
        </member>
        <member name="M:Norm.IConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an object.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="start">The start.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Norm.IConnection.ConnectionString">
            <summary>
            The connection string used to create this connection.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Client">
            <summary>
            Gets the tcp client.
            </summary>
        </member>
        <member name="P:Norm.IConnection.IsConnected">
            <summary>
            Gets a value indicating whether the client is connected.
            </summary>
        </member>
        <member name="P:Norm.IConnection.IsInvalid">
            <summary>
            Gets a value indicating whether the connection is invalid.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Created">
            <summary>
            Gets the connection created date.
            </summary>
        </member>
        <member name="P:Norm.IConnection.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
        </member>
        <member name="P:Norm.IConnection.StrictMode">
            <summary>
            Gets a value indicating whether to use strict mode.
            </summary>
        </member>
        <member name="P:Norm.IConnection.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:Norm.IConnection.Database">
            <summary>
            Gets the database name.
            </summary>
        </member>
        <member name="M:Norm.Connection.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Connection"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Norm.Connection.Digest(System.String)">
            <summary>
            Digests the specified nonce.
            </summary>
            <param name="nonce">The nonce.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Connection.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Connection.LoadOptions(System.String)">
            <summary>
            Loads the options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Norm.Connection.ResetOptions">
            <summary>
            Resets the options.
            </summary>
        </member>
        <member name="M:Norm.Connection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="start">The start.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Norm.Connection.SetQueryTimeout(System.Int32)">
            <summary>
            Sets the query timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.Connection.SetStrictMode(System.Boolean)">
            <summary>
            Sets the strict mode.
            </summary>
            <param name="strict">if set to <c>true</c> [strict].</param>
        </member>
        <member name="M:Norm.Connection.SetPoolSize(System.Int32)">
            <summary>
            Sets the size of the pool.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Norm.Connection.SetPooled(System.Boolean)">
            <summary>
            Sets the pooled.
            </summary>
            <param name="pooled">if set to <c>true</c> [pooled].</param>
        </member>
        <member name="M:Norm.Connection.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Norm.Connection.SetLifetime(System.Int32)">
            <summary>
            Sets the lifetime.
            </summary>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Norm.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Norm.Connection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Norm.Connection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Norm.Connection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Norm.Connection.Client">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:Norm.Connection.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Norm.Connection.IsInvalid">
            <summary>
            Gets a value indicating whether this instance is invalid.
            </summary>
            <value>
            	<c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Norm.Connection.Created">
            <summary>
            Gets the created date and time.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:Norm.Connection.QueryTimeout">
            <summary>
            Gets the query timeout.
            </summary>
            <value>The query timeout.</value>
        </member>
        <member name="P:Norm.Connection.StrictMode">
            <summary>
            Gets a value indicating whether to use strict mode.
            </summary>
            <value><c>true</c> if strict mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Norm.Connection.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Norm.Connection.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.GreaterThanQualifier">
            <summary>
            The greater than qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.GreaterThanQualifier.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.GreaterThanQualifier"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Norm.Collections.MongoCollection">
            <summary>
            The mongo collection.
            </summary>
        </member>
        <member name="T:Norm.Collections.MongoCollection`1">
            <summary>
            Mongo typed collection.
            </summary>
            <typeparam name="T">Collection type</typeparam>
        </member>
        <member name="T:Norm.Collections.IMongoCollection`1">
            <summary>
            Generic collection interface
            </summary>
            <typeparam name="T">The type of collection</typeparam>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find``1(``0)">
            <summary>
            Finds the specified document.
            </summary>
            <typeparam name="U">Type of document</typeparam>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find">
            <summary>
            Finds all documents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find``1(``0,System.Int32,System.String)">
            <summary>
            Finds the specified document with a limited result set.
            </summary>
            <typeparam name="U">Type of document</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The limit.</param>
            <param name="fullyQualifiedName">Name of the fully qualified.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find``1(``0,System.Int32)">
            <summary>
            Finds the specified document with a limited result set.
            </summary>
            <typeparam name="U">Type of document</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Find``1(``0,System.Int32,System.Int32)">
            <summary>
            Find using the template, but skip some and limit how many you want.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="template"></param>
            <param name="limit"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.FindOne``1(``0)">
            <summary>
            Finds one document.
            </summary>
            <typeparam name="U">Type to find</typeparam>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.GetChildCollection``1(System.String)">
            <summary>
            Gets a nested collection with the type specified and the name specified.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Update``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            Updates the specified document.
            </summary>
            <typeparam name="X">Document to match</typeparam>
            <typeparam name="U">Document to update</typeparam>
            <param name="matchDocument">The match document.</param>
            <param name="valueDocument">The value document.</param>
            <param name="updateMultiple">if set to <c>true</c> update all matching documents.</param>
            <param name="upsert">if set to <c>true</c> upsert.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.UpdateOne``2(``0,``1)">
            <summary>
            Updates one document.
            </summary>
            <typeparam name="X">Document to match</typeparam>
            <typeparam name="U">Document to update</typeparam>
            <param name="matchDocument">The match document.</param>
            <param name="valueDocument">The value document.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Delete``1(``0)">
            <summary>
            Delete the documents that mact the specified template.
            </summary>
            <typeparam name="U">a document that has properties
            that match what you want to delete.</typeparam>
            <param name="template">The template.</param>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.Delete(`0)">
            <summary>
            Delete the entity
            </summary>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``1(System.String,System.String)">
            <summary>
            Execute the mapreduce on this collection.
            </summary>
            <param name="map"></param>
            <param name="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``2(``0,System.String,System.String)">
            <summary>
            Execute the mapreduce with a limiting query on this collection.
            </summary>
            <param name="template"></param>
            <param name="map"></param>
            <param name="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``2(``0,System.String,System.String,System.String)">
            <summary>
            Execute the mapreduce with a limiting query and finalize on this collection.
            </summary>
            <param name="template"></param>
            <param name="map"></param>
            <param name="reduce"></param>
            <param name="finalize"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.IMongoCollection`1.MapReduce``1(Norm.MapReduceOptions{`0})">
            <summary>
            Execute the mapreduce with the supplied options on this collection.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Norm.Collections.IMongoCollection`1.Updateable">
            <summary>
            Gets a value indicating whether this <see cref="T:Norm.Collections.IMongoCollection`1"/> is updateable.
            </summary>
            <value><c>true</c> if updateable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._updateable">
            <summary>
            This will have a different instance for each concrete version of <see cref="T:Norm.Collections.MongoCollection`1"/>
            </summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._collectionName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._connection">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Collections.MongoCollection`1._db">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.#ctor(System.String,Norm.MongoDatabase,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.MongoCollection`1"/> class.
            Represents a strongly-typed set of documents in the db.
            </summary>
            <param name="collectionName">The collection Name.</param>
            <param name="db">The db.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Save(`0)">
            <summary>
            Attempts to save or update an instance
            </summary>
            <param name="entity">The entity.</param>
            <remarks>
            Only works when the Id property is of type ObjectId
            </remarks>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.GetChildCollection``1(System.String)">
            <summary>
            Get a child collection of the specified type.
            </summary>
            <typeparam name="U">Type of collection</typeparam>
            <param name="collectionName">The collection Name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.UpdateOne``2(``0,``1)">
            <summary>
            Overload of Update that updates one document and doesn't upsert if no matches are found.
            </summary>
            <typeparam name="X">Document to match</typeparam>
            <typeparam name="U">Value document</typeparam>
            <param name="matchDocument">The match Document.</param>
            <param name="valueDocument">The value Document.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Update``2(``0,``1,System.Boolean,System.Boolean)">
            <summary>
            The update.
            </summary>
            <typeparam name="X">Document to match</typeparam>
            <typeparam name="U">Value document</typeparam>
            <param name="matchDocument">The match document.</param>
            <param name="valueDocument">The value document.</param>
            <param name="updateMultiple">The update multiple.</param>
            <param name="upsert">The upsert.</param>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.DeleteIndices(System.Int32@)">
            <summary>
            Deletes all indices on this collection.
            </summary>
            <param name="numberDeleted">
            </param>
            <returns>
            The delete indices.
            </returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.DeleteIndex(System.String,System.Int32@)">
            <summary>
            Deletes the specified index for the collection.
            </summary>
            <param name="indexName">
            </param>
            <param name="numberDeleted">
            </param>
            <returns>
            The delete index.
            </returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.FindOne``1(``0)">
            <summary>
            This will do a search on the collection using the specified template.
            If no documents are found, default(T) will be returned.
            </summary>
            <typeparam name="U">A type that has each member set to the value to search.
            Keep in mind that all the properties must either be concrete values, or the
            special "Qualifier"-type values.</typeparam>
            <param name="template">The template.</param>
            <returns>
            The first document that matched the template, or default(T)
            </returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Update``1(``0,System.Action{Norm.Commands.Modifiers.IModifierExpression{`0}})">
            <summary>Allows a document to be updated using the specified action.</summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Update``1(``0,System.Action{Norm.Commands.Modifiers.IModifierExpression{`0}},System.Boolean,System.Boolean)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find">
            <summary>
            Find objects in the collection without any qualifiers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``1(``0)">
            <summary>
            Return all documents matching the template
            </summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <returns></returns>
            <remarks>
            Ok, not all documents, just all documents up to Int32.MaxValue - if you bring that many back, you've crashed. Sorry.
            </remarks>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``1(``0,System.Int32)">
            <summary>
            Get the documents that match the specified template.
            </summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The number to return from this command.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``1(``0,System.Int32,System.Int32)">
            <summary>Finds the documents matching the template, an limits/skips the specified numbers.</summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The number to return from this command.</param>
            <param name="skip">The skip step.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``2(``0,``1,System.Int32,System.Int32)">
            <summary>Finds the documents matching the template, an limits/skips the specified numbers.</summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <typeparam name="O">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <param name="orderby">How to order the results</param>
            <param name="limit">The number to return from this command.</param>
            <param name="skip">The skip step.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``1(``0,System.Int32,System.String)">
            <summary>
            The find.
            </summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The limit.</param>
            <param name="fullyQualifiedName">The fully qualified name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Count">
            <summary>
            A count on this collection without any filter.
            </summary>
            <returns>The count.</returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.GetCollectionStatistics">
            <summary>
            The get collection statistics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.CreateIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,Norm.Protocol.Messages.IndexOption)">
            <summary>
            Creates an index for a given collection.
            </summary>
            <param name="index">The property to index.</param>
            <param name="indexName">The index Name.</param>
            <param name="isUnique">Unique index flag.</param>
            <param name="direction">Ascending or descending.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Distinct``1(System.String)">
            <summary>
            Gets the distinct values for the specified key.
            </summary>
            <typeparam name="U">You better know that every value that could come back
            is of this type, or BAD THINGS will happen.</typeparam>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Delete``1(``0)">
            <summary>
            Delete the documents that mact the specified template.
            </summary>
            <typeparam name="U">a document that has properties
            that match what you want to delete.</typeparam>
            <param name="template">The template.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Delete(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``1(``0,System.Int32,System.Int32,System.String)">
            <summary>
            Finds documents
            </summary>
            <typeparam name="U">Type of document to find.</typeparam>
            <param name="template">The template.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <param name="fullyQualifiedName">The fully qualified name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``2(``0,``1,System.Int32,System.Int32,System.String)">
            <summary>
            Locates documents that match the template, in the order specified.
            </summary>
            <remarks>
            remember that "orderby" is the mongo notation where the following would sort by Name ascending,
            then by Date descending
            
            new {Name=1, Date-1}
            </remarks>
            <typeparam name="U"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="template">Passing null for this means it will be ignored.</param>
            <param name="orderBy">Passing null for this means it will be ignored.</param>
            <param name="limit">The maximum number of documents to return.</param>
            <param name="skip">The number to skip before returning any.</param>
            <param name="fullyQualifiedName">The collection from which to pull the documents.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Find``2(``0,``1)">
            <summary>
            Finds documents that match the template, and ordered according to the orderby document.
            </summary>
            <typeparam name="U"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="template">The spec document</param>
            <param name="orderBy">The order specification</param>
            <returns>A set of documents ordered correctly and matching the spec.</returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Explain``1(``0)">
            <summary>
            Generates a query explain plan.
            </summary>
            <typeparam name="U">The type of the template document (probably an anonymous type..</typeparam>
            <param name="template">The template of the query to explain.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Count``1(``0)">
            <summary>
            A count using the specified filter.
            </summary>
            <typeparam name="U">Document type</typeparam>
            <param name="query">The query.</param>
            <returns>The count.</returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Insert(`0[])">
            <summary>
            Inserts documents
            </summary>
            <param name="documentsToInsert">
            The documents to insert.
            </param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts documents
            </summary>
            <param name="documentsToInsert">
            The documents to insert.
            </param>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``1(System.String,System.String)">
            <summary>
            Executes the MapReduce on this collection
            </summary>
            <typeparam name="X">The return type</typeparam>
            <param name="map"></param>
            <param name="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``2(``0,System.String,System.String)">
            <summary>
            Executes the map reduce with an applied template
            </summary>
            <typeparam name="U">The type of the template</typeparam>
            <typeparam name="X">The return type</typeparam>
            <param name="template"></param>
            <param name="map"></param>
            <param name="reduce"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``2(``0,System.String,System.String,System.String)">
            <summary>
            Executes the map reduce with an applied template and finalize
            </summary>
            <typeparam name="U">The type of the template</typeparam>
            <typeparam name="X">The return type</typeparam>
            <param name="template">The template</param>
            <param name="map"></param>
            <param name="reduce"></param>
            <param name="finalize"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.MapReduce``1(Norm.MapReduceOptions{`0})">
            <summary>
            Executes the map reduce with any options
            </summary>
            <typeparam name="X">The return type</typeparam>
            <param name="options">The options</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.TrySettingId(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Tries the setting id property.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Norm.Collections.MongoCollection`1.CanUpdateWithoutId(System.Type)">
            <summary>
            Checks whether type implements IUpdateWithoutId.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if implemented; otherwise false.</returns>
        </member>
        <member name="P:Norm.Collections.MongoCollection`1.Updateable">
            <summary>
            True if the type of this collection can be updated 
            (i.e. the Type specifies "_id", "ID", or a property with the attributed "MongoIdentifier").
            </summary>
        </member>
        <member name="P:Norm.Collections.MongoCollection`1.FullyQualifiedName">
            <summary>
            The name of this collection, including the database prefix.
            </summary>
        </member>
        <member name="M:Norm.Collections.MongoCollection.#ctor(System.String,Norm.MongoDatabase,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.MongoCollection"/> class.
            Represents a strongly-typed set of documents in the db.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <param name="db">The db.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:Norm.BSON.DbTypes.ObjectIdGenerator">
            <summary>
            Shameless-ly ripped off, then slightly altered from samus' implementation on GitHub
            http://github.com/samus/mongodb-csharp/blob/f3bbb3cd6757898a19313b1af50eff627ae93c16/MongoDBDriver/ObjectIdGenerator.cs
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.epoch">
            <summary>
            The epoch.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.inclock">
            <summary>
            The inclock.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.inc">
            <summary>
            The inc.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.machineHash">
            <summary>
            The machine hash.
            </summary>
        </member>
        <member name="F:Norm.BSON.DbTypes.ObjectIdGenerator.procID">
            <summary>
            The proc id.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.ObjectIdGenerator"/> class. 
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.Generate">
            <summary>
            Generates a byte array ObjectId.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateTime">
            <summary>
            Generates time.
            </summary>
            <returns>
            The time.
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateInc">
            <summary>
            Generate an increment.
            </summary>
            <returns>
            The increment.
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateConstants">
            <summary>
            Generates constants.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateHostHash">
            <summary>
            Generates a host hash.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.ObjectIdGenerator.GenerateProcId">
            <summary>
            Generates a proc id.
            </summary>
            <returns>
            Proc id.
            </returns>
        </member>
        <member name="T:Norm.MongoDatabase">
            <summary>
            Mongo database
            </summary>
        </member>
        <member name="M:Norm.MongoDatabase.#ctor(System.String,Norm.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.MongoDatabase"/> class.
            </summary>
            <param name="databaseName">The database name.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection(System.String)">
            <summary>
            The get collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection``1(System.String)">
            <summary>
            Gets a collection.
            </summary>
            <typeparam name="T">collection type</typeparam>
            <param name="collectionName">The collection name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollection``1">
            <summary>
            Gets a collection.
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetAllCollections">
            <summary>
            Gets all collections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetCollectionStatistics(System.String)">
            <summary>
            Gets collection statistics.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.DropCollection(System.String)">
            <summary>
            Drops a collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns>The drop collection.</returns>
        </member>
        <member name="M:Norm.MongoDatabase.CreateCollection(Norm.Collections.CreateCollectionOptions)">
            <summary>
            Creates a collection.
            </summary>
            <param name="options">The options.</param>
            <returns>The create collection.</returns>
        </member>
        <member name="M:Norm.MongoDatabase.SetProfileLevel(Norm.Protocol.SystemMessages.ProfileLevel)">
            <summary>
            Sets the profile level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.GetProfilingInformation">
            <summary>
            Gets profiling information.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.MongoDatabase.ValidateCollection(System.String,System.Boolean)">
            <summary>
            Validates a collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="scanData">The scan data.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDatabase.LastError">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.MongoDatabase.CurrentConnection">
            <summary>
            Gets the current connection.
            </summary>
        </member>
        <member name="P:Norm.MongoDatabase.DatabaseName">
            <summary>
            Gets the dtabase name.
            </summary>
        </member>
        <member name="T:Norm.Responses.ProfileLevelResponse">
            <summary>
            The profile level response.
            </summary>
        </member>
        <member name="M:Norm.Responses.ProfileLevelResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ProfileLevelResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ProfileLevelResponse.PreviousLevel">
            <summary>
            Gets or sets the previous profiling level.
            </summary>
            <value>The previous level.</value>
        </member>
        <member name="T:Norm.Responses.LastErrorResponse">
            <summary>
            Indicates what the last error the MongoDB server encountered was.
            </summary>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.NumberOfErrors">
            <summary>
            Gets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Norm.Responses.LastErrorResponse.Code">
            <summary>
            Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.ProfileLevel">
            <summary>
            Profiling levels.
            </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.ProfilingOff">
            <summary>
            Profiling off.
            </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.SlowOperations">
             <summary>
            Slow operations.
             </summary>
        </member>
        <member name="F:Norm.Protocol.SystemMessages.ProfileLevel.AllOperations">
            <summary>
            All operations.
            </summary>
        </member>
        <member name="T:Norm.Linq.PartialEvaluator">
            <summary>
            Rewrites an expression tree so that locally isolatable sub-expressions are evaluated and converted into ConstantExpression nodes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Norm.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Norm.Linq.PartialEvaluator.Eval(System.Linq.Expressions.Expression)" -->
        <!-- Badly formed XML comment ignored for member "T:Norm.Linq.PartialEvaluator.SubtreeEvaluator" -->
        <member name="T:Norm.Linq.ExpressionVisitor">
            <summary>
            The expression visitor.
            </summary>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a binding.
            </summary>
            <param name="binding">
            The binding.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an element initializer.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a unary expression.
            </summary>
            <param name="u">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression.
            </summary>
            <param name="b">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a "type is" expression
            </summary>
            <param name="b">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant.
            </summary>
            <param name="c">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a conditional.
            </summary>
            <param name="c">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a parameter.
            </summary>
            <param name="p">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            The visit member access.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits amethod call.
            </summary>
            <param name="m">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an expression list.
            </summary>
            <param name="original">
            The original expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a member assignment.
            </summary>
            <param name="assignment">
            The assignment.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a member member binding.
            </summary>
            <param name="binding">
            The binding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a member list binding.
            </summary>
            <param name="binding">
            The binding.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a binding list.
            </summary>
            <param name="original">
            The original.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an element initializer list.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a lambda.
            </summary>
            <param name="lambda">
            The lambda.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a new expression.
            </summary>
            <param name="nex">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a member init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a list init.
            </summary>
            <param name="init">The init.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a new array.
            </summary>
            <param name="na">
            The na.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an invocation.
            </summary>
            <param name="iv">The invocation.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Linq.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:Norm.Linq.LinqTypeHelper">
            <summary>
            Type related helper methods
            </summary>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.FindIEnumerable(System.Type)">
            <summary>
            Find IEnumerable.
            </summary>
            <param name="seqType">The seq type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetSequenceType(System.Type)">
            <summary>
            The get sequence type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetElementType(System.Type)">
            <summary>
            The get element type.
            </summary>
            <param name="seqType">The seq type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.IsNullableType(System.Type)">
            <summary>
            The is nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns>nullable type.</returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.IsNullAssignable(System.Type)">
            <summary>
            The is null assignable.
            </summary>
            <param name="type">The type.</param>
            <returns>null assignable.</returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetNonNullableType(System.Type)">
            <summary>
            The get non nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.LinqTypeHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            The get member type.
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Configuration.MongoTypeConfiguration">
            <summary>
            This class holds all configuration information for type mapping.
            </summary>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration.RemoveMappings``1">
            <summary>
            Remove mappings for the specifed type.
            </summary>
            <remarks>
            This is primarily defined for support of unit testing, 
            you may use it for client code, but you should *NEVER* call it with types
            defined in the Norm library.
            </remarks>
            <typeparam name="T">The type from which to remove mappings.</typeparam>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.PropertyMaps">
            <summary>
            Gets the property maps.
            </summary>
            <value>The property maps.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.ConnectionStrings">
            <summary>
            Gets the connection strings.
            </summary>
            <value>The connection strings.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.CollectionNames">
            <summary>
            Gets the collection names.
            </summary>
            <value>The collection names.</value>
        </member>
        <member name="P:Norm.Configuration.MongoTypeConfiguration.SummaryTypes">
            <summary>
            Gets the summary types.
            </summary>
            <value>The summary type.</value>
        </member>
        <member name="T:Norm.Configuration.IPropertyMappingExpression">
            <summary>
            Defines a property mapping expression
            </summary>
        </member>
        <member name="M:Norm.Configuration.IPropertyMappingExpression.UseAlias(System.String)">
            <summary>
            Uses the alias for a given type's property.
            </summary>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:Norm.Configuration.IPropertyMappingExpression.SourcePropertyName">
            <summary>
            Gets or sets the name of the source property.
            </summary>
            <value>The name of the source property.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.SizeQualifier">
            <summary>
            The size qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.SizeQualifier.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.SizeQualifier"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:Norm.Commands.Qualifiers.ExistsQuallifier">
            <summary>
            The exists quallifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.ExistsQuallifier.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.ExistsQuallifier"/> class.
            </summary>
            <param name="doesExist">The does exist.</param>
        </member>
        <member name="T:Norm.Commands.Modifiers.AddToSetOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.ModifierCommand">
            <summary>
            The modifier command.
            </summary>
        </member>
        <member name="M:Norm.BSON.ModifierCommand.#ctor(System.String,System.Object)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.AddToSetOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Responses.PreviousErrorResponse">
            <summary>
            The previous error response.
            </summary>
        </member>
        <member name="M:Norm.Responses.PreviousErrorResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.PreviousErrorResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.NumberOfErrors">
            <summary>
            Gets or sets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Norm.Responses.PreviousErrorResponse.NumberOfOperationsAgo">
            <summary>
            Gets or sets the number of operations ago.
            </summary>
            <value>The number of operations ago.</value>
        </member>
        <member name="T:Norm.Responses.ListDatabasesResponse">
            <summary>
            The structure for the response to the "listdatabases" command.
            </summary>
        </member>
        <member name="P:Norm.Responses.ListDatabasesResponse.TotalSize">
            <summary>?? Gets the total size of all the databases returned?? </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ListDatabasesResponse.Databases">
            <summary>The databases.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest">
            <summary>
            The authentication request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Authenticate">
            <summary>
            Authenticate.
            </summary>
            <value>The Authenticate property gets the Authenticate data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Nonce">
            <summary>
            The nonce.
            </summary>
            <value>The Nonce property gets/sets the Nonce data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.User">
            <summary>
            The user.
            </summary>
            <value>The User property gets/sets the User data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.AuthenticationRequest.Key">
            <summary>
            The key.
            </summary>
            <value>The Key property gets/sets the Key data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.UpdateMessage`2">
            <summary>
            The update message.
            </summary>
            <typeparam name="T">Document template Type</typeparam>
            <typeparam name="U">Value document type</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.UpdateMessage`2.#ctor(Norm.IConnection,System.String,Norm.Protocol.Messages.UpdateOption,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.UpdateMessage`2"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="collection">The collection.</param>
            <param name="options">The options.</param>
            <param name="matchDocument">The match document.</param>
            <param name="valueDocument">The value document.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.UpdateMessage`2.Execute">
            <summary>
            Execute.
            </summary>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
            <exception cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            </exception>
        </member>
        <member name="T:Norm.NormalConnectionProvider">
            <summary>
            The normal connection provider.
            </summary>
        </member>
        <member name="M:Norm.NormalConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.NormalConnectionProvider"/> class.
            </summary>
            <param name="builder">
            The builder.
            </param>
        </member>
        <member name="M:Norm.NormalConnectionProvider.Open(System.String)">
            <summary>
            Opens the connection
            </summary>
            <param name="options">
            The options.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.NormalConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="P:Norm.NormalConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationTypeMap">
            <summary>
            The mongo configuration type map.
            </summary>
        </member>
        <member name="F:Norm.Configuration.MongoConfigurationTypeMap._fieldMap">
            <summary>
            The _field map.
            </summary>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.FieldMap">
            <summary>
            Gets the field map.
            </summary>
            <value>The field map.</value>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.CollectionName">
            <summary>
            Gets or sets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:Norm.Configuration.MongoConfigurationTypeMap.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="T:Norm.ObjectId">
            <summary>
            Represents a Mongo document's ObjectId
            </summary>
        </member>
        <member name="M:Norm.ObjectId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
        </member>
        <member name="M:Norm.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.ObjectId"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Norm.ObjectId.NewObjectId">
            <summary>
            Generates a new unique oid for use with MongoDB Objects.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.ObjectId.TryParse(System.String,Norm.ObjectId@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="id">
            The id.
            </param>
            <returns>
            The try parse.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.op_Equality(Norm.ObjectId,Norm.ObjectId)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Norm.ObjectId.op_Inequality(Norm.ObjectId,Norm.ObjectId)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Norm.ObjectId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Norm.ObjectId.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.Equals(Norm.ObjectId)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            The equals.
            </returns>
        </member>
        <member name="M:Norm.ObjectId.DecodeHex(System.String)">
            <summary>
            Decodes a HexString to bytes.
            </summary>
            <param name="val">
            The hex encoding string that should be converted to bytes.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.ObjectId.op_Implicit(Norm.ObjectId)~System.String">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.ObjectId.op_Implicit(System.String)~Norm.ObjectId">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.ObjectId.Empty">
            <summary>
            Provides an empty ObjectId (all zeros).
            </summary>
        </member>
        <member name="P:Norm.ObjectId.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Norm.Q">
            <summary>
            Qualifier operations.
            Provides a way to specify some of the "special" qualifiers that can be used for querying.
            </summary>
            <remarks>
            This should remain in the Norm namespace so that it's available 
            automatically when someone is using a MongoCollection.
            </remarks>
        </member>
        <member name="M:Norm.Q.IsNull">
            <summary>
            Construct an "equals" qualifier testing for Null.
            </summary>
            <remarks>
            This is just sugar, it returns an object reference to null.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.IsNotNull">
            <summary>
            Construct a {$ne : null} qualifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Where(System.String)">
            <summary>
            construct a $where qualifier
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessThan(System.Double)">
            <summary>
            Builds a $lt qualifier for the search.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.LessOrEqual(System.Double)">
            <summary>
            Builds a $lte qualifier for the search.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterOrEqual(System.Double)">
            <summary>
            Builds a $gte qualifier for the search.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterThan(System.Double)">
            <summary>
            Builds a $gt qualifier for the search.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.GreaterThan(System.DateTime)">
            <summary>
            Builds a $gt qualifier for the search.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.All``1(``0[])">
            <summary>
            Builds an $all statement
            </summary>
            <typeparam name="T">Type to qualify</typeparam>
            <param name="all">All.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.In``1(``0[])">
            <summary>
            Builds an $in qualifier statement.
            </summary>
            <typeparam name="T">Type to qualify</typeparam>
            <param name="inSet">The in set.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.NotEqual``1(``0)">
            <summary>
            Builds a $ne qualifier against the value.
            </summary>
            <typeparam name="T">Type to compare for equality</typeparam>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Equals``1(``0)">
            <summary>
            Passes the value straight back to you, new { Property = "value"} will
            work just fine as a qualifier. Here for the sake of consistency.
            </summary>
            <typeparam name="T">Type to compare for equality</typeparam>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Size(System.Double)">
            <summary>
            Builds a $size qualifier.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.NotIn``1(``0[])">
            <summary>
            Builds an $nin qualifier statement.
            </summary>
            <typeparam name="T">Type to qualify</typeparam>
            <param name="inSet">The in set.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.ElementMatch``1(``0)">
            <summary>
            constructs a $elemMatch qualifier statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matchDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Matches(System.String)">
            <summary>
            returns a constructed regex to be used to match the specified property name in the DB.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.Q.Exists(System.Boolean)">
            <summary>
            Builds an $exists qualifier for the search.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.GenericCommandResponse">
            <summary>
            The generic command response.
            </summary>
        </member>
        <member name="M:Norm.Responses.GenericCommandResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.GenericCommandResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.GenericCommandResponse.Info">
            <summary>
            Gets the command info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Norm.Responses.ForceSyncResponse">
            <summary>
            Indicates the result of a demand that MongoDB flush non-file committed writes to their respective files.
            </summary>
        </member>
        <member name="M:Norm.Responses.ForceSyncResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.ForceSyncResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.ForceSyncResponse.NumberOfFiles">
            <summary>
            Gets the number of files.
            </summary>
            <value>The number of files.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest">
            <summary>
            The create collection request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest"/> class.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.#ctor(Norm.Collections.CreateCollectionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest"/> class.
            </summary>
            <param name="options">The options.</param>        
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Create">
            <summary>
            Gets options name.
            </summary>
            <value>The Create property gets the Create data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Size">
            <summary>
            The size of the collection.
            </summary>
            <value>The Size property gets the Size data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The Max property gets the Max data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.Capped">
            <summary>
            A value indicating if the collection is capped.
            </summary>
            <value>The Capped property gets the Capped data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Request.CreateCollectionRequest.AutoIndexId">
            <summary>
            A value indicating the autoIndexId.
            </summary>
            <value>The AutoIndexId property gets the AutoIndexId data member.</value>
        </member>
        <member name="T:Norm.ConnectionProviderFactory">
            <summary>
            The connection provider factory.
            </summary>
        </member>
        <member name="M:Norm.ConnectionProviderFactory.Create(System.String)">
            <summary>
            Creates a connection provider.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.ConnectionProviderFactory.CreateNewProvider(Norm.ConnectionStringBuilder)">
            <summary>
            The create new provider.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Norm.Configuration.MongoTypeConfiguration`1">
            <summary>
            Mongo configuration for a specific type
            </summary>
            <typeparam name="T">
            Type under configuratino
            </typeparam>
        </member>
        <member name="T:Norm.Configuration.ITypeConfiguration`1">
            <summary>
            Type-specific type configuration
            </summary>
            <typeparam name="T">
            The ype to configure
            </typeparam>
        </member>
        <member name="T:Norm.Configuration.ITypeConfiguration">
            <summary>
            Defines a type's collection name and connection string.
            </summary>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.UseCollectionNamed(System.String)">
            <summary>
            Uses a collection name for a given type.
            </summary>
            <param name="collectionName">
            Name of the collection.
            </param>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.UseConnectionString(System.String)">
            <summary>
            Uses a connection string for a given type.
            </summary>
            <param name="connectionString">
            The connection string.
            </param>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration.SummaryOf``1">
            <summary>
            Marks a type as a summary of another type (partial get)
            </summary>        
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Looks up property names for use with aliases.
            </summary>
            <param name="sourcePropery">The source propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.ITypeConfiguration`1.IdIs(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies the Id property for entities that don't have conventional Id's and can't be changed.
            </summary>
            <param name="idProperty">The unconventional Id propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.ForProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Looks up property names for use with aliases.
            </summary>
            <param name="sourcePropery">The source propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.IdIs(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines a property as and entity's Id explicitly.
            </summary>
            <param name="idProperty">The Id propery.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.UseCollectionNamed(System.String)">
            <summary>
            Uses a name collection for a given type.
            </summary>
            <param name="connectionStrings">The connection strings.</param>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.UseConnectionString(System.String)">
            <summary>
            Uses a connection string for a given type.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Norm.Configuration.MongoTypeConfiguration`1.SummaryOf``1">
            <summary>
            Marks a type as a summary of another type (partial get)
            </summary>  
        </member>
        <member name="T:Norm.Commands.Modifiers.PushOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PushOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Commands.Modifiers.PullOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PullOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.ExpandoProperty">
            <summary>
            Expando Property
            </summary>
            <remarks>
            This is a glorified KeyValuePair - but this leaves 
            us more "open" to hooking extra stuff on, if we need to at some later point.
            </remarks>
        </member>
        <member name="M:Norm.BSON.ExpandoProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.ExpandoProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Norm.BSON.ExpandoProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Norm.BSON.ExpandoProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile">
            <summary>
            Allows for the saving of filestreams into the DB with meta data.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.OpenFile(Norm.Mongo,Norm.ObjectId)">
            <summary>
            Opens a file from the default namespace "fs"
            </summary>
            <param name="db"></param>
            <param name="fileKey"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.OpenFile(Norm.Collections.IMongoCollection,Norm.ObjectId)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="fileKey"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.CreateFile(Norm.Mongo)">
            <summary>
            Construct a file from the db.
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.#ctor(Norm.Collections.IMongoCollection,Norm.ObjectId)">
            <summary>
            Open a grid file from the collection
            </summary>
            <param name="collection"></param>
            <param name="fileKey"></param>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.Save">
            <summary>
            Writes the information to the file stream.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile.FileChunk">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.FileChunk.#cctor">
            <summary>
            Causes the property mapping to kick in.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.ID">
            <summary>
            The unique id for this chunk.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.SequenceID">
            <summary>
            The order of this chunk with relation to it's siblings.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.FileID">
            <summary>
            Indicates the file to which this chunk belongs.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileChunk.Payload">
            <summary>
            The binary data in this chunk.
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.GridFile.FileMetadata">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.GridFile.FileMetadata.#cctor">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.FileName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ContentType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.Length">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.ChunkSize">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.UploadDate">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.Aliases">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.MetaData">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.GridFile.FileMetadata.MD5Checksum">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Responses.DroppedDatabaseResponse">
            <summary>
            The dropped database response.
            </summary>
        </member>
        <member name="P:Norm.Responses.DroppedDatabaseResponse.Dropped">
            <summary>
            Gets or sets the dropped database.
            </summary>
            <value>The dropped.</value>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest">
            <summary>
            The collection statistics request.
            </summary>
        </member>
        <member name="M:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest"/> class.
            </summary>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.CollectionStatisticsRequest.CollectionStatistics">
            <summary>
            Gets or sets the collection statistics.
            </summary>
            <value>The User property gets/sets the User data member.</value>
            <value>The CollectionStatistics property gets/sets the CollectionStatistics data member.</value>
        </member>
        <member name="T:Norm.Responses.AssertInfoResponse">
            <summary>
            The assert info response.
            </summary>
        </member>
        <member name="M:Norm.Responses.AssertInfoResponse.#cctor">
            <summary>
            Initializes the <see cref="T:Norm.Responses.AssertInfoResponse"/> class.
            </summary>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.DatabaseAsserted">
            <summary>
            Indicates if the database asserted.
            </summary>
            <value>The DatabaseAsserted property gets the DatabaseAsserted data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.Asserted">
            <summary>
            Indicates that the database asserted or a user assert has happened
            </summary>
            <value>The Asserted property gets the Asserted data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.Assert">
            <summary>
            The assert.
            </summary>
            <value>The Assert property gets the Assert data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.WarningAssert">
            <summary>
            The warning assert.
            </summary>
            <value>The WarningAssert property gets the WarningAssert data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.AssertMessage">
            <summary>
            The assert message.
            </summary>
            <value>The AssertMessage property gets the AssertMessage data member.</value>
        </member>
        <member name="P:Norm.Responses.AssertInfoResponse.AssertUser">
            <summary>
            Gets or sets assert user.
            </summary>
            <value>The AssertUser property gets the AssertUser data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.MapReduceMessage">
            <summary>
            The map reduce message.
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.MapReduce">
            <summary>TODO::Description.</summary>
            <value>The MapReduce property gets/sets the MapReduce data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Map">
            <summary>TODO::Description.</summary>
            <value>The Map property gets/sets the Map data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Reduce">
            <summary>TODO::Description.</summary>
            <value>The Reduce property gets/sets the Reduce data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.KeepTemp">
            <summary>TODO::Description.</summary>
            <value>The KeepTemp property gets/sets the KeepTemp data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Out">
            <summary>TODO::Description.</summary>
            <value>The Out property gets/sets the Out data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Limit">
            <summary>TODO::Description.</summary>
            <value>The Limit property gets/sets the Limit data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Query">
            <summary>
            Gets or sets the Query
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.MapReduceMessage.Finalize">
            <summary>TODO::Description.</summary>
            <value>The Finalize property gets/sets the Finalize data member.</value>
        </member>
        <member name="T:Norm.Linq.MongoQuery`1">
            <summary>
            A default implementation of IQueryable for use with QueryProvider
            </summary>
            <typeparam name="T">Type to query; also the underlying collection type.</typeparam>
        </member>
        <member name="T:Norm.Linq.IMongoQuery">
            <summary>
            A mongo query.
            </summary>
        </member>
        <member name="M:Norm.Linq.IMongoQuery.GetExpression">
            <summary>
            Gets an expression.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.#ctor(Norm.Linq.MongoQueryProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQuery`1"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="collectionName">
            The collection name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.#ctor(Norm.Linq.MongoQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQuery`1"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.#ctor(Norm.Linq.MongoQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Linq.MongoQuery`1"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="expression">
            The expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetExpression">
            <summary>
            Gets an expression.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerable.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.Explain(Norm.BSON.Expando)">
            <summary>
            Gets an explain plan.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetCollection``1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.GetCollection``1(System.String)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Linq.MongoQuery`1.ToString">
            <summary>
            Returns the query in string format
            </summary>
            <returns>The to string.</returns>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets IQueryable.Expression.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            Gets IQueryable.ElementType.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            Gets IQueryable.Provider.
            </summary>
        </member>
        <member name="T:Norm.Commands.Qualifiers.LessThanQualifier">
            <summary>
            The less than qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.LessThanQualifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.LessThanQualifier"/> class.
            Builds a less than qualifier, really ought to be a number (MAYBE a string)
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Norm.Commands.Qualifiers.InQualifier`1">
            <summary>
            The in qualifier.
            </summary>
            <typeparam name="T">In type to qualify</typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.InQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.InQualifier`1"/> class.
            </summary>
            <param name="inset">
            The inset.
            </param>
        </member>
        <member name="F:Norm.BSON.Document.Length">
            <summary>
            Document length
            </summary>
        </member>
        <member name="F:Norm.BSON.Document.Parent">
            <summary>
            Document parent
            </summary>
        </member>
        <member name="F:Norm.BSON.Document.Digested">
            <summary>
            Digested (read/written)
            </summary>
        </member>
        <member name="T:Norm.BSON.IdPropertyFinder">
            <summary>
             Determines the best property to be used as the identifier property.
            </summary>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.#ctor(System.Type)">
            <summary>
             Initializes new IdPropertyFinder.
            </summary>
            <param name="type">The type for which an id property needs to be identified.</param>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.#ctor(System.Type,System.Reflection.PropertyInfo[])">
            <summary>
             Initializes new IdPropertyFinder.
             Use this constructor to limit the properties you want to test.
            </summary>
            <param name="type">The type for which an id property needs to be identified.</param>
            <param name="properties">The candidate properties fo the type.</param>
        </member>
        <member name="M:Norm.BSON.IdPropertyFinder.PropertyIsExplicitlyMappedToId(System.String)">
            <summary>
            Determines if the Id has been explicitly defined in a MongoConfigurationMap <see cref="T:Norm.Configuration.MongoConfigurationMap"/>.
            </summary>
            <param name="idPropertyCandidate">The property name.</param>
        </member>
        <member name="P:Norm.BSON.IdPropertyFinder.IdProperty">
            <summary>
             Returns the property determined to be the Id with the following priority.
             Property named _id
             Explicitly mapped Id property
             Attribute defined Id property
             Property named Id
             Conflicts result in MongoConfigurationMapException.
            </summary>
        </member>
        <member name="T:Norm.BSON.BsonDeserializer">
            <summary>
            BSON Deserializer
            </summary>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.BsonDeserializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectData">The object data.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Byte[],System.Collections.Generic.IDictionary{System.WeakReference,Norm.BSON.Expando}@)">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectData">The object data.</param>
            <param name="outProps">The out props.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.Int32,System.IO.BinaryReader,System.Collections.Generic.IDictionary{System.WeakReference,Norm.BSON.Expando}@)">
            <summary>
            Deserializes the specified object data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectData">The object data.</param>
            <param name="outProps">The out props.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Deserialize``1(System.IO.BinaryReader)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Read``1">
            <summary>
            Reads a document instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.Read(System.Int32)">
            <summary>
            Reads the specified document forward by the input value.
            </summary>
            <param name="read">Read length.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.IsDone">
            <summary>
            Determines whether there is more to read.
            </summary>
            <returns>
            	<c>true</c> if this instance is read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.NewDocument(System.Int32)">
            <summary>
            Creates a new document.
            </summary>
            <param name="length">The document length.</param>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.DeserializeValue(System.Type,Norm.BSON.BSONTypes)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="type">The type.</param>
            <param name="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.DeserializeValue(System.Type,Norm.BSON.BSONTypes,System.Object)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="type">The type.</param>
            <param name="storedType">Type of the stored.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadObject(System.Type)">
            <summary>
            Reads an object.
            </summary>
            <param name="type">The object type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadList(System.Type,System.Object)">
            <summary>
            Reads a list.
            </summary>
            <param name="listType">Type of the list.</param>
            <param name="existingContainer">The existing container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a dictionary.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is a dictionary; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadDictionary(System.Type,System.Object)">
            <summary>
            Reads a dictionary.
            </summary>
            <param name="listType">Type of the list.</param>
            <param name="existingContainer">The existing container.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadBinary">
            <summary>
            Reads binary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadName">
            <summary>
            Reads a name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadString">
            <summary>
            Reads a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadInt(Norm.BSON.BSONTypes)">
            <summary>
            Reads ag int.
            </summary>
            <param name="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadLong(Norm.BSON.BSONTypes)">
            <summary>
            Reads a long.
            </summary>
            <param name="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadEnum(System.Type,Norm.BSON.BSONTypes)">
            <summary>
            Reads an enum.
            </summary>
            <param name="type">The type.</param>
            <param name="storedType">Type of the stored.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadRegularExpression">
            <summary>
            Reads the regular expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadType">
            <summary>
            Reads a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadScopedCode">
            <summary>
            Reads scoped code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.ReadFlyweight">
            <summary>
            Reads a flyweight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.BsonDeserializer.HandleError(System.String)">
            <summary>
            Handles ab error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Norm.Configuration.ConfigurationContainer">
            <summary>
            Mongo configuration container
            </summary>
        </member>
        <member name="T:Norm.Configuration.IConfigurationContainer">
            <summary>
            Defines access for configuration containers
            </summary>
        </member>
        <member name="M:Norm.Configuration.IConfigurationContainer.AddMap``1">
            <summary>
            Registers a mongo type map implicitly.
            </summary>
            <typeparam name="T">Type to configure
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.IConfigurationContainer.GetConfigurationMap">
            <summary>
            Gets the configuration map.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Configuration.ConfigurationContainer.AddMap``1">
            <summary>
            Registers a Mongo Configuration Map by calling the default 
            constructor of T (so that's where you should add your mapping logic)
            </summary>
            <remarks>
            BY CONVENTION, the default constructor of T should register the mappings that are relevant.
            </remarks>
            <typeparam name="T">
            The type of the map that should be added.
            </typeparam>
        </member>
        <member name="M:Norm.Configuration.ConfigurationContainer.GetConfigurationMap">
            <summary>
            Gets the configuration map.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Norm.Commands.Qualifiers.AllQualifier`1">
            <summary>
            The all qualifier.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:Norm.Commands.Qualifiers.AllQualifier`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.AllQualifier`1"/> class.
            </summary>
            <param name="all">The value.</param>
        </member>
        <member name="T:Norm.Commands.Modifiers.PopOperation">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PopOperation.#ctor(Norm.Commands.Modifiers.PopType)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Commands.Modifiers.PopType">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Commands.Modifiers.PopType.RemoveFirst">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Commands.Modifiers.PopType.RemoveLast">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.DocumentExceedsSizeLimitsException`1">
            <summary>
            An exception that can be thrown by MongoCollection when the document is more than the MongoDB limit of 4MB.
            </summary>
            <typeparam name="T">
            The type of the document that was serialized.
            </typeparam>
        </member>
        <member name="M:Norm.BSON.DocumentExceedsSizeLimitsException`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.DocumentExceedsSizeLimitsException`1"/> class.
            </summary>
            <param name="document">
            The document.
            </param>
            <param name="size">
            The size.
            </param>
        </member>
        <member name="P:Norm.BSON.DocumentExceedsSizeLimitsException`1.DocumentSize">
            <summary>
            The size in bytes of the document after serialization.
            </summary>
        </member>
        <member name="P:Norm.BSON.DocumentExceedsSizeLimitsException`1.Document">
            <summary>
            The document that was serialized.
            </summary>
        </member>
        <member name="T:Norm.Responses.ValidateCollectionResponse">
            <summary>
            The validate collection response.
            </summary>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Ns">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Result">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.Valid">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.ValidateCollectionResponse.LastExtentSize">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.Messages.ReplyMessage`1">
            <summary>
            The reply message.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.ReplyMessage`1.#ctor(Norm.IConnection,System.String,System.IO.BinaryReader,Norm.Protocol.MongoOp,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.ReplyMessage`1"/> class.
            Processes a response stream.
            </summary>
            <param name="connection">The connection.</param>
            <param name="fullyQualifiedCollestionName">The fully Qualified Collestion Name.</param>
            <param name="reply">The reply.</param>
            <param name="originalOperation"></param>
            <param name="limit"></param>
        </member>
        <member name="M:Norm.Protocol.Messages.ReplyMessage`1.Dispose">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.CursorID">
            <summary>
            The cursor to be used in future calls to "get more"
            </summary>
            <value>The CursorID property gets/sets the CursorID data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.CursorPosition">
            <summary>
            The location of the cursor.
            </summary>
            <value>The CursorPosition property gets/sets the CursorPosition data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.HasError">
            <summary>
            If "HasError" is set, 
            </summary>
            <value>The HasError property gets/sets the HasError data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.ReplyMessage`1.Results">
            <summary>
            An enumerable result set.
            </summary>
            <value>The Results property gets the Results data member.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.WhereQualifier">
            <summary>
            Provides a hook to create a $where qualifier for a query.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.WhereQualifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.WhereQualifier"/> class.
            </summary>
            <param name="inExpression">The in expression.</param>
        </member>
        <member name="T:Norm.Commands.Modifiers.PushAllOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.PushAllOperation`1.#ctor(`0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.ScopedCode`1">
            <summary>
            A class that represents code with scoping - will be serialized to
            </summary>
            <typeparam name="T">Type of scoped code</typeparam>
        </member>
        <member name="P:Norm.ScopedCode`1.Scope">
            <summary>
            The Scope this this code.
            </summary>
        </member>
        <member name="T:Norm.MongoDiscriminatedAttribute">
            <summary>
            Flags a type as having a discriminator.  Apply to a base type to enable multiple-inheritance.
            </summary>
        </member>
        <member name="M:Norm.MongoDiscriminatedAttribute.GetDiscriminatingTypeFor(System.Type)">
            <summary>
            Finds the sub-type or interface from the given type that declares itself as a discriminating base class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.MongoDiscriminatedAttribute.GetDiscriminatedAttribute(System.Type)">
            <summary>
            Determines whether the type given directly declares itself as saving sub-types with a discriminator
            </summary>
            <param name="usingType"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Protocol.Messages.DeleteMessage`1">
            <summary>
            The delete message.
            </summary>
            <typeparam name="U">Type to delete </typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.DeleteMessage`1.#ctor(Norm.IConnection,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.DeleteMessage`1"/> class.
            Delete some docs from the database.
            </summary>
            <param name="connection">The connection.</param>
            <param name="collection">The collection.</param>
            <param name="templateDocument">The template Document.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.DeleteMessage`1.Execute">
            <summary>
            Execute a delete
            </summary>
        </member>
        <member name="T:Norm.Responses.MapReduceResponse">
            <summary>
            The map reduce response.
            </summary>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.PrepareForQuerying(Norm.MongoDatabase)">
            <summary>
            The prepare for querying.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.GetCollection(System.String)">
            <summary>
            Gets a collection.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.Responses.MapReduceResponse.GetCollection``1">
            <summary>
            Gets a typed collection.
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <returns></returns>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.Result">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.Counts">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.TimeMillis">
            <summary>TODO::Description.</summary>
            <value></value>
        </member>
        <member name="T:Norm.Responses.MapReduceResponse.MapReduceCount">
            <summary>
            The map reduce count.
            </summary>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Input">
            <summary>
            Gets or sets Input.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Emit">
            <summary>
            Gets or sets Emit.
            </summary>
            <value></value>
        </member>
        <member name="P:Norm.Responses.MapReduceResponse.MapReduceCount.Output">
            <summary>
            Gets or sets Output.
            </summary>
            <value></value>
        </member>
        <member name="T:Norm.Protocol.Messages.GetMoreMessage`1">
            <summary>Get more message.</summary>
            <typeparam name="T">Type to get</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.GetMoreMessage`1.#ctor(Norm.IConnection,System.String,System.Int64,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.GetMoreMessage`1"/> class.</summary>
            <param name="connection">The connection.</param>
            <param name="fullyQualifiedCollectionName">The fully qualified collection name.</param>
            <param name="cursorID">The cursor id.</param>
            <param name="limit"></param>
        </member>
        <member name="M:Norm.Protocol.Messages.GetMoreMessage`1.Execute">
            <summary>attempt to get more results.</summary>        
        </member>
        <member name="T:Norm.BSON.MagicProperty">
            <summary>
            A class to call Properties dynamically on an instance.
            </summary>
        </member>
        <member name="M:Norm.BSON.MagicProperty.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.MagicProperty"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="declaringType"></param>
        </member>
        <member name="M:Norm.BSON.MagicProperty.GetDefaultValue">
            <summary>
            Return the value specified in the DefaultValue attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.IgnoreProperty(System.Object,System.Object@)">
            <summary>
            Check to see if we need to serialize this property.
            </summary>
            <param name="document">The instance on which the property should be applied.</param>
            <param name="value">The value of the property in the provided instance</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateSetterMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter method.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateGetterMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter method.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.CreateShouldSerializeMethod(System.Reflection.PropertyInfo)">
            <summary>
            Creates the should serialize method.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.SetterMethod``2(System.Reflection.PropertyInfo)">
            <summary>
            Setter method.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam">The type of the param.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.GetterMethod``2(System.Reflection.PropertyInfo)">
            <summary>
            Getter method.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam">The type of the param.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.MagicProperty.ShouldSerializeMethod``1(System.Reflection.MethodInfo)">
            <summary>
            ShouldSerialize... method.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.BSON.MagicProperty.DeclaringType">
            <summary>
            The object that declared this property.
            </summary>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Type">
            <summary>
            Gets the property's underlying type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.IgnoreIfNull">
            <summary>
            Gets a value indicating whether to ignore the property if it's null.
            </summary>
            <value><c>true</c> if ignoring; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.HasDefaultValue">
            <summary>
            Returns if this PropertyInfo has DefaultValueAttribute associated
            with it.
            </summary>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Setter">
            <summary>
            Gets or sets the property setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.Getter">
            <summary>
            Gets or sets the property getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:Norm.BSON.MagicProperty.ShouldSerialize">
            <summary>
            Gets of sets the property ShouldSerialize
            </summary>
        </member>
        <member name="T:Norm.Attributes.MongoIgnoreAttribute">
            <summary>
            Indicates that the BSON serializer should ignore the property on which this attribute is applied.
            </summary>
        </member>
        <member name="T:Norm.Protocol.SystemMessages.Requests.MongoIndex`1">
            <summary>
            Describes an index to insert into the db.
            </summary>
            <typeparam name="T">Collection type for indexing</typeparam>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex`1.Key">
            <summary>
            The key.
            </summary>
            <value>The Key property gets/sets the Key data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex`1.Namespace">
            <summary>
            The namespace the index resides within.
            </summary>
            <value>The Namespace property gets/sets the Namespace data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex`1.Unique">
            <summary>
            Whether or not the index is unique.
            </summary>
            <value>The Unique property gets/sets the Unique data member.</value>
        </member>
        <member name="P:Norm.Protocol.SystemMessages.Requests.MongoIndex`1.Name">
            <summary>
            The name of the index.
            </summary>
            <value>The Name property gets/sets the Name data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.IndexOption">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="F:Norm.Protocol.Messages.IndexOption.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="F:Norm.Protocol.Messages.IndexOption.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="T:Norm.Linq.MongoQueryTranslator">
            <summary>
            The mongo query translator.
            </summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._takeCount">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._lastFlyProperty">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._lastOperator">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._sbWhere">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._sbIndexed">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._whereWritten">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.Linq.MongoQueryTranslator._isDeepGraphWithArrays">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates LINQ to MongoDB.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.Translate(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Translates LINQ to MongoDB.
            </summary>
            <param name="exp">The expression.</param>
            <param name="useScopedQualifier">Whether to use the "this" qualifier</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits member access.
            </summary>
            <param name="m">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a Unary call.
            </summary>
            <param name="u">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.GetParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            The get parameter expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression.
            </summary>
            <param name="b">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant.
            </summary>
            <param name="c">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a method call.
            </summary>
            <param name="m">The expression.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.IsCallableMethod(System.String)">
            <summary>
            Determines if it's a callable method.
            </summary>
            <param name="methodName">The method name.</param>
            <returns>The is callable method.</returns>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.SetFlyValue(System.Object)">
            <summary>
            The set flyweight value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleSkip(System.Linq.Expressions.Expression)">
            <summary>
            Handles skip.
            </summary>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleTake(System.Linq.Expressions.Expression)">
            <summary>
            Handles take.
            </summary>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:Norm.Linq.MongoQueryTranslator.HandleMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            The handle method call.
            </summary>
            <param name="m">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.SortFly">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.SortDescendingBy">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.AggregatePropName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.TypeName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.CollectionName">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.MethodCall">
            <summary>TODO::Description.</summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.IsComplex">
            <summary>
            Gets a value indicating whether IsComplex.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.OptimizedWhere">
            <summary>
            Gets optimized where clause.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.ConditionalCount">
            <summary>
            Gets conditional count.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.FlyWeight">
            <summary>
            Gets FlyWeight.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.Skip">
            <summary>
            How many to skip.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.Take">
            <summary>
            How many to take (Int32.MaxValue) by default.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.WhereExpression">
            <summary>
            Gets where expression.
            </summary>
        </member>
        <member name="P:Norm.Linq.MongoQueryTranslator.UseScopedQualifier">
            <summary>
            Whether to use the "this" qualifier
            </summary>
        </member>
        <member name="T:Norm.IMongoGrouping`2">
            <summary>
            The i mongo grouping.
            </summary>
            <typeparam name="K">Key</typeparam>
            <typeparam name="V">Value</typeparam>
        </member>
        <member name="P:Norm.IMongoGrouping`2.Key">
            <summary>
            Gets or sets the ey.
            </summary>
        </member>
        <member name="P:Norm.IMongoGrouping`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Norm.TimedLock">
            <summary>
            Thanks to Eric Gunnerson and Phil Haack
            </summary>
        </member>
        <member name="M:Norm.TimedLock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.TimedLock"/> struct.
            </summary>
            <param name="o">
            The object to lock.
            </param>
        </member>
        <member name="M:Norm.TimedLock.Lock(System.Object)">
            <summary>
            Lock an object.
            </summary>
            <param name="o">The object to lock.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            The object to lock.
            </summary>
            <param name="o">The object to lock.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:Norm.LockTimeoutException">
            </exception>
        </member>
        <member name="M:Norm.TimedLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Norm.TimedLock.Sentinel">
            <summary>
            The sentinel.
            </summary>
        </member>
        <member name="F:Norm.TimedLock.Sentinel.StackTraces">
            <summary>
            The stack traces.
            </summary>
        </member>
        <member name="M:Norm.TimedLock.Sentinel.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Norm.TimedLock.Sentinel"/> class. 
            </summary>
        </member>
        <member name="T:Norm.LockTimeoutException">
            <summary>
            Thrown when a lock times out.
            </summary>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param name="blockingStackTrace">The blocking stack trace.</param>
        </member>
        <member name="M:Norm.LockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.LockTimeoutException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Norm.LockTimeoutException.BlockingStackTrace">
            <summary>
            Gets BlockingStackTrace.
            </summary>
        </member>
        <member name="T:Norm.Server">
            <summary>
            Server details
            </summary>
        </member>
        <member name="P:Norm.Server.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Norm.Server.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:Norm.Commands.Qualifiers.LessOrEqualQualifier">
            <summary>
            The less or equal qualifier.
            </summary>
        </member>
        <member name="M:Norm.Commands.Qualifiers.LessOrEqualQualifier.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.Qualifiers.LessOrEqualQualifier"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Norm.M">
            <summary>
            Shorthand to construct modifier operations
            for MongoDB fields.
            </summary>
            <remarks>
            This should remain in the Norm namespace so that it's available 
            automatically when someone is using a MongoCollection.
            </remarks>
        </member>
        <member name="M:Norm.M.Increment(System.Int32)">
            <summary>
            Creates a $inc operation to be applied to a field using the update command.
            </summary>
            <param name="amountToIncrementBy"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Set``1(``0)">
            <summary>
             Creates a $set operation to be applied to a field using the update command. 
            </summary>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Push``1(``0)">
            <summary>
            Defines a $push operation against the the property that this is being assigned to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pushValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.PushAll``1(``0[])">
            <summary>
            $push es all values into the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pushValues"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.AddToSet``1(``0)">
            <summary>
            defines an $addToSet operation on the property with which this is being assigned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="addToSetValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Pull``1(``0)">
            <summary>
            defines a $pull operation against the lefthand property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pullValue"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.Pop(Norm.Commands.Modifiers.PopType)">
            <summary>
            defines a $pop operation against the lefthand property.
            </summary>
            <param name="popType"></param>
            <returns></returns>
        </member>
        <member name="M:Norm.M.PullAll``1(``0[])">
            <summary>
            defines a $pullAll on the lefthand property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pullValues"></param>
            <returns></returns>
        </member>
        <member name="T:Norm.Responses.DatabaseInfo">
            <summary>
            The database info.
            </summary>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.Name">
            <summary>TODO::Description.</summary>
            <value>The name.</value>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.SizeOnDisk">
            <summary>TODO::Description.</summary>
            <value>The size on disk.</value>
        </member>
        <member name="P:Norm.Responses.DatabaseInfo.Empty">
            <summary>TODO::Description.</summary>
            <value>If the database is empty.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.QueryMessage`2">
            <summary>
            A query to the db.
            </summary>
            <typeparam name="T">The response type.</typeparam>
            <typeparam name="U">The request type.</typeparam>
        </member>
        <member name="M:Norm.Protocol.Messages.QueryMessage`2.#ctor(Norm.IConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Protocol.Messages.QueryMessage`2"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="fullyQualifiedCollName">Name of the fully qualified coll.</param>
        </member>
        <member name="M:Norm.Protocol.Messages.QueryMessage`2.Execute">
            <summary>
            Causes this message to be sent and a repsonse to be generated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.Query">
            <summary>
            A BSON query.
            </summary>
            <value>The Query property gets/sets the Query data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.FieldSelection">
            <summary>
            The fields to select
            </summary>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.OrderBy">
            <summary>TODO::Description.</summary>
            <value>The OrderBy property gets/sets the OrderBy data member.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.NumberToTake">
            <summary>
            Gets or sets the number of documents to take.
            </summary>
            <value>The number of documents to take.</value>
        </member>
        <member name="P:Norm.Protocol.Messages.QueryMessage`2.NumberToSkip">
            <summary>
            The number of documents to skip before starting to return documents.
            </summary>
            <value>The Map property gets/sets the Map data member.</value>
        </member>
        <member name="T:Norm.Protocol.Messages.QueryMessage`2.QueryOptions">
            <summary>
            The available options when creating a query against Mongo.
            </summary>
        </member>
        <member name="T:Norm.MapReduceResult`2">
            <summary>
            A generic class for handling MapReduce resonses. Not required to use but is helpful if returning more than one value.
            MapReduce returns a collection of objects that are key - value pairs. The value can be a single value, or more likely a document response.
            If you are getting back a single int you could declare MapReduceResponseGeneric&lt;int%gt;, if its a more complex type it could be MapReduceResponseGeneric&lt;myclass&gt;
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2._id">
            <summary>
            The Id returned from Mongo
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2.Key">
            <summary>
            A friendly mapping to the _id property
            </summary>
        </member>
        <member name="P:Norm.MapReduceResult`2.Value">
            <summary>
            The generic value returned from Mongo.
            </summary>
        </member>
        <member name="T:Norm.Configuration.PropertyMappingExpression">
            <summary>
            The property mapping expression.
            </summary>
        </member>
        <member name="M:Norm.Configuration.PropertyMappingExpression.UseAlias(System.String)">
            <summary>
            Uses the alias for a given type's property.
            </summary>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="M:Norm.Configuration.PropertyMappingExpression.Norm#IHideObjectMembers#GetType">
            <summary>
            The property mapping expression.
            </summary>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.IsId">
            <summary>
            Gets or sets whether the property is the Id for the entity.
            </summary>
            <value>True if the property is the entity's Id.</value>
        </member>
        <member name="P:Norm.Configuration.PropertyMappingExpression.SourcePropertyName">
            <summary>
            Gets or sets the name of the source property.
            </summary>
            <value>The name of the source property.</value>
        </member>
        <member name="T:Norm.Configuration.MongoConfigurationMapException">
            <summary>
            </summary>
        </member>
        <member name="M:Norm.Configuration.MongoConfigurationMapException.#ctor(System.String)">
            <summary>
             Defines problems with type mappings.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Norm.PullAllOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.PullAllOperation`1.#ctor(`0[])">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.Collections.CreateCollectionOptions">
            <summary>
            The create collection options.
            </summary>
        </member>
        <member name="M:Norm.Collections.CreateCollectionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.CreateCollectionOptions"/> class.
            </summary>
        </member>
        <member name="M:Norm.Collections.CreateCollectionOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Collections.CreateCollectionOptions"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Capped">
            <summary>
            Gets or sets a value indicating whether Capped.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Size">
            <summary>
            Gets or sets Size.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Max">
            <summary>
            Gets or sets Max.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.AutoIndexId">
            <summary>
            Gets or sets a value indicating whether AutoIndexId.
            </summary>
        </member>
        <member name="P:Norm.Collections.CreateCollectionOptions.Create">
            <summary>
            Gets or sets Create.
            </summary>
        </member>
        <member name="T:Norm.BSON.TypeHelper">
            <summary>
            Convenience methods for type reflection.
            </summary>
        </member>
        <member name="M:Norm.BSON.TypeHelper.GetProperties(System.Type)">
            <summary>
            Returns the PropertyInfo for properties defined as Instance, Public, NonPublic, or FlattenHierarchy
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Norm.BSON.TypeHelper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.BSON.TypeHelper"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Norm.BSON.TypeHelper.GetHelperForType(System.Type)">
            <summary>
            The get helper for type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.FindProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Lifted from AutoMaper.  Finds a property using a lambda expression
            (i.e. x => x.Name)
            </summary>
            <param name="lambdaExpression">The lambda expression.</param>
            <returns>Property name</returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.FindProperty(System.Type,System.String)">
            <summary>
            Finds a property.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.GetProperties">
            <summary>
            Gets all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.FindProperty(System.String)">
            <summary>
            Returns the magic property for the specified name, or null if it doesn't exist.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.FindIdProperty">
            <summary>
            Finds the id property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.FindIdProperty(System.Type)">
            <summary>
             Returns the property defined as the Id for the entity either by convention or explicitly. 
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.LoadMagicProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Reflection.PropertyInfo)">
            <summary>
            Loads magic properties.
            </summary>
            <param name="properties">The properties.</param>
            <param name="idProperty">The id property.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.GetTypeDiscriminator">
            <summary>
            Determines the discriminator to use when serialising the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Norm.BSON.TypeHelper.ApplyDefaultValues(System.Object)">
            <summary>
            Apply default values to the properties in the instance
            </summary>
            <param name="typeHelper"></param>
            <param name="instance"></param>
        </member>
        <member name="P:Norm.BSON.TypeHelper.IsExpando">
            <summary>
            indicates if this type implements "IExpando"
            </summary>
        </member>
        <member name="T:Norm.BSON.DbTypes.DbReference`1">
            <summary>
            A DB-pointer to another document.
            </summary>
            <typeparam name="T">The type of document being referenced.</typeparam>
        </member>
        <member name="T:Norm.BSON.DbTypes.DbReference`2">
            <summary>
            A DB-pointer to another document.
            </summary>
            <typeparam name="T">The type of document being referenced.</typeparam>
            <typeparam name="TId">The type of ID used by the document being referenced.</typeparam>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.DbReference`2"/> class.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.#ctor(`1)">
            <summary>
            Constructor for easier instantiation of db references.
            </summary>
            <param name="id">The id of the referenced document.</param>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.Fetch(System.Func{Norm.Collections.MongoCollection{`0}})">
            <summary>
            Fetches the instance of type T in the collection referenced by the DBRef $id
            </summary>
            <param name="referenceCollection">
            The reference collection.
            </param>
            <returns>
            Referenced type T
            </returns>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`2.Fetch(System.Func{Norm.Mongo})">
            <summary>
            Fetches the instance of type T in the collection referenced by the DBRef $id
            </summary>
            <param name="server">
            A function that returns an instance of the Mongo server connection.
            </param>
            <returns>
            Referenced type T
            </returns>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.Collection">
            <summary>
            The collection in while the referenced value lives.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.Id">
            <summary>
            The ID of the referenced object.
            </summary>
        </member>
        <member name="P:Norm.BSON.DbTypes.DbReference`2.DatabaseName">
            <summary>
            The name of the db where the reference is stored.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Norm.BSON.DbTypes.DbReference`2"/> class.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Norm.BSON.DbTypes.DbReference`1.#ctor(Norm.ObjectId)">
            <summary>
            Constructor for easier instantiation of db references.
            </summary>
            <param name="id">The id of the referenced document.</param>
        </member>
        <member name="T:Norm.Commands.IncrementOperation">
            <summary>
            The increment operation.
            </summary>
        </member>
        <member name="M:Norm.Commands.IncrementOperation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.Commands.IncrementOperation"/> class.
            </summary>
            <param name="amountToIncrement">The amount to increment.</param>
        </member>
        <member name="T:Norm.Responses.CollectionInfo">
            <summary>
            The collection info.
            </summary>
        </member>
        <member name="P:Norm.Responses.CollectionInfo.Name">
            <summary>
            The collection name.
            </summary>
            <value>The Name property gets/sets the Name data member.</value>
        </member>
        <member name="P:Norm.Responses.CollectionInfo.Options">
            <summary>
            The create collection options.
            </summary>
            <value>The Options property gets the Options data member.</value>
        </member>
        <member name="T:Norm.Responses.DistinctValuesResponse`1">
            <summary>
            The distinct values response.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="P:Norm.Responses.DistinctValuesResponse`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Norm.PooledConnectionProvider">
            <summary>
            The pooled connection provider.
            </summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.#ctor(Norm.ConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Norm.PooledConnectionProvider"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Open(System.String)">
            <summary>
            Opens the connection.
            </summary>
            <param name="options">Connection options.</param>
            <returns></returns>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Close(Norm.IConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Norm.PooledConnectionProvider.Cleanup">
            <summary>
            Cleans up this instance.
            </summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.IsAlive(Norm.IConnection)">
            <summary>
            Determines whether the connection is alive.
            </summary>
            <param name="connection">The connection.</param>
            <returns>True if alive; otherwise false.</returns>
        </member>
        <member name="M:Norm.PooledConnectionProvider.CheckFreeConnectionsAlive">
            <summary>
            The check free connections alive.
            </summary>
        </member>
        <member name="M:Norm.PooledConnectionProvider.DisposeInvalidConnections">
            <summary>
            The dispose invalid connections.
            </summary>
        </member>
        <member name="P:Norm.PooledConnectionProvider.ConnectionString">
            <summary>
            Gets ConnectionString.
            </summary>
        </member>
        <member name="T:Norm.Configuration.MongoConfiguration">
            <summary>
            This is a singleton with which all property maps should be registered.
            </summary>
            <remarks>
            The BSON Serializer and LINQ-to-Mongo both use this in order to correctly map the property
            name on the POCO to its correspondent field name in the database.
            
            This is slightly thread-scary.
            </remarks>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.RemoveMapFor``1">
            <summary>
            Kill a map for the specified type.
            </summary>
            <remarks>This is here for unit testing support, use at your own risk.</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.FireTypeChangedEvent(System.Type)">
            <summary>
            Allows various objects to fire type change event.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.Initialize(System.Action{Norm.Configuration.IConfigurationContainer})">
            <summary>
            Given this singleton IConfigurationContainer, add a fluently-defined map.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetPropertyAlias(System.Type,System.String)">
            <summary>
            Given the type, and the property name,
            get the alias as it has been defined by Initialization calls of "add"
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            Property alias if one is configured; otherwise returns the input propertyName
            </returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetCollectionName(System.Type)">
            <summary>
            Given the type, get the fluently configured collection type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type's Collection name</returns>
        </member>
        <member name="M:Norm.Configuration.MongoConfiguration.GetConnectionString(System.Type)">
            <summary>
            Given a type, get the connection string defined for it.
            </summary>
            <remarks>
            ATT: Not sure this is needed, should potentially be removed if possible.
            </remarks>
            <param name="type">The type for whicht to get the connection string.</param>
            <returns>
            The type's connection string if configured; otherwise null.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Norm.Configuration.MongoConfiguration.SummaryTypeFor(System.Type)" -->
        <member name="P:Norm.Configuration.MongoConfiguration.ConfigurationContainer">
            <summary>
            Gets the configuration provider instance.
            </summary>
            <value>The configuration provider.</value>
        </member>
        <member name="T:Norm.Commands.Modifiers.SetOperation`1">
            <summary>TODO::Description.</summary>
        </member>
        <member name="M:Norm.Commands.Modifiers.SetOperation`1.#ctor(`0)">
            <summary>TODO::Description.</summary>
        </member>
        <member name="T:Norm.BSON.BSONTypes">
            <summary>
            Represents the various  types available from within MongoDB
            </summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Double">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.String">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Object">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Array">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Binary">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Undefined">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.MongoOID">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Boolean">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.DateTime">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Null">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Regex">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Reference">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Code">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Symbol">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.ScopedCode">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Int32">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Timestamp">
            <summary>TODO::Description.</summary>
        </member>
        <member name="F:Norm.BSON.BSONTypes.Int64">
            <summary>TODO::Description.</summary>
        </member>
    </members>
</doc>
